// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package api

import (
	"errors"
	"math/big"
	"strings"

	ethereum "github.com/ethereum/go-ethereum"
	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/ethereum/go-ethereum/event"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = errors.New
	_ = big.NewInt
	_ = strings.NewReader
	_ = ethereum.NotFound
	_ = bind.Bind
	_ = common.Big1
	_ = types.BloomLookup
	_ = event.NewSubscription
	_ = abi.ConvertType
)

// LoyaltyProgrammeCoupon is an auto generated low-level Go binding around an user-defined struct.
type LoyaltyProgrammeCoupon struct {
	CouponId        *big.Int
	IssuerBusiness  common.Address
	SuperCoins      *big.Int
	Count           *big.Int
	Discount        *big.Int
	ProductCategory *big.Int
	ThresholdValue  *big.Int
	ProductId       *big.Int
	CouponType      uint8
	ExpiryTime      *big.Int
	Active          bool
}

// ApiMetaData contains all meta data concerning the Api contract.
var ApiMetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"transactionId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"holdingId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"couponId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expiryDate\",\"type\":\"uint256\"}],\"name\":\"CouponHoldingExpired\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"transactionId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"couponId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"requested\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"available\",\"type\":\"uint256\"}],\"name\":\"InSufficientCoupons\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"transactionId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"requested\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"available\",\"type\":\"uint256\"}],\"name\":\"InSufficientFunds\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"transactionId\",\"type\":\"uint256\"},{\"internalType\":\"enumLoyaltyProgramme.AccountType\",\"name\":\"validAuthority\",\"type\":\"uint8\"},{\"internalType\":\"enumLoyaltyProgramme.AccountType\",\"name\":\"senderAuthority\",\"type\":\"uint8\"}],\"name\":\"InValidAuthority\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"transactionId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"couponId\",\"type\":\"uint256\"}],\"name\":\"InValidCoupon\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"transactionId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"holdingId\",\"type\":\"uint256\"}],\"name\":\"InValidCouponHolding\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"transactionId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"couponId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"expectedBusiness\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"receivedBusiness\",\"type\":\"address\"}],\"name\":\"InValidCouponHoldingApplication\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"transactionId\",\"type\":\"uint256\"},{\"internalType\":\"enumLoyaltyProgramme.AccountType\",\"name\":\"recieverAuthority\",\"type\":\"uint8\"}],\"name\":\"InValidRecipient\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"transactionId\",\"type\":\"uint256\"},{\"internalType\":\"enumLoyaltyProgramme.AccountType\",\"name\":\"existingAuthority\",\"type\":\"uint8\"}],\"name\":\"InValidRegistration\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"transactionId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"message\",\"type\":\"string\"}],\"name\":\"IntegrityConstraintFailed\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"transactionId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"requestor\",\"type\":\"address\"}],\"name\":\"UnAuthorized\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"transactionId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"person\",\"type\":\"address\"}],\"name\":\"UnRegisteredAccount\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"transactionId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"enumLoyaltyProgramme.AccountType\",\"name\":\"validAuthority\",\"type\":\"uint8\"},{\"internalType\":\"enumLoyaltyProgramme.AccountType\",\"name\":\"senderAuthority\",\"type\":\"uint8\"}],\"name\":\"UnexpectedAccount\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"transactionId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"couponId\",\"type\":\"uint256\"}],\"name\":\"CouponCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"transactionId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"consumerSender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"businessReceiver\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"holdingId\",\"type\":\"uint256\"}],\"name\":\"CouponHoldingTransactionComplete\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"transactionId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"businessSender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"consumerReceiver\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"couponId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"count\",\"type\":\"uint256\"}],\"name\":\"CouponTransactionComplete\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"transactionId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"memberAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"enumLoyaltyProgramme.AccountType\",\"name\":\"authority\",\"type\":\"uint8\"}],\"name\":\"MemberRegistered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"transactionId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"SuperCoinTransactionComplete\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"couponList\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"couponId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"issuerBusiness\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"superCoins\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"count\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"discount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"productCategory\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"thresholdValue\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"productId\",\"type\":\"uint256\"},{\"internalType\":\"enumLoyaltyProgramme.CouponType\",\"name\":\"couponType\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"expiryTime\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"active\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"transactionId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"consumerTokenPayment\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"transactionId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"holdingId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"businessAddress\",\"type\":\"address\"}],\"name\":\"consumerCouponPayment\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"transactionId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"businessAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"couponId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"count\",\"type\":\"uint256\"}],\"name\":\"purchaseCoupon\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"redeemTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"transactionId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"couponId\",\"type\":\"uint256\"}],\"name\":\"deactiveCoupon\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"transactionId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"issuerBusiness\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"count\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"cost\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"discount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"productCategory\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"thresholdValue\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"productId\",\"type\":\"uint256\"},{\"internalType\":\"enumLoyaltyProgramme.CouponType\",\"name\":\"couponType\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"expiryTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"creationCost\",\"type\":\"uint256\"}],\"name\":\"createCoupons\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"transactionId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"memberAddress\",\"type\":\"address\"},{\"internalType\":\"enumLoyaltyProgramme.AccountType\",\"name\":\"accountType\",\"type\":\"uint8\"}],\"name\":\"registerMember\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"transactionId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"pay\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"transactionId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"mintTokens\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"transactionId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"person\",\"type\":\"address\"}],\"name\":\"getAccountBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"transactionId\",\"type\":\"uint256\"}],\"name\":\"getAllCoupons\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"couponId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"issuerBusiness\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"superCoins\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"count\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"discount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"productCategory\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"thresholdValue\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"productId\",\"type\":\"uint256\"},{\"internalType\":\"enumLoyaltyProgramme.CouponType\",\"name\":\"couponType\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"expiryTime\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"active\",\"type\":\"bool\"}],\"internalType\":\"structLoyaltyProgramme.Coupon[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"transactionId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"brandAddress\",\"type\":\"address\"}],\"name\":\"getBrandCoupons\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"couponId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"issuerBusiness\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"superCoins\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"count\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"discount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"productCategory\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"thresholdValue\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"productId\",\"type\":\"uint256\"},{\"internalType\":\"enumLoyaltyProgramme.CouponType\",\"name\":\"couponType\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"expiryTime\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"active\",\"type\":\"bool\"}],\"internalType\":\"structLoyaltyProgramme.Coupon[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]",
	Bin: "0x60a0604052346200004b576200001462000217565b6200001e62000051565b613249620002758239608051818181610c3b01528181611cc701528181612b9a0152612cf6015261324990f35b62000057565b60405190565b5f80fd5b5f1b90565b906200006e5f19916200005b565b9181191691161790565b90565b90565b90565b6200009a62000094620000a09262000078565b6200007e565b6200007b565b90565b90565b90620000c0620000ba620000c89262000081565b620000a3565b825462000060565b9055565b60018060a01b031690565b620000e290620000cc565b90565b620000f19051620000d7565b90565b6200010d620001076200011392620000cc565b6200007e565b620000cc565b90565b6200012190620000f4565b90565b6200012f9062000116565b90565b906200013e9062000124565b5f5260205260405f2090565b90565b62000166620001606200016c926200007b565b6200007e565b6200007b565b90565b90620001896200018362000191926200014d565b620000a3565b825462000060565b9055565b90620001a360ff916200005b565b9181191691161790565b634e487b7160e01b5f52602160045260245ffd5b60041115620001cc57565b620001ad565b90620001de82620001c1565b565b620001eb90620001d2565b90565b90565b906200020b620002056200021392620001e0565b620001ee565b825462000195565b9055565b620002245f6001620000a6565b33608052620002726200024e620002485f620002416080620000e5565b9062000132565b6200014a565b620002666200025d5f62000081565b5f83016200016f565b600460039101620001f1565b56fe60806040526004361015610013575b610ad6565b61001d5f356100ec565b80630313766f146100e75780630d2c7b5f146100e2578063203d6441146100dd57806334a7c2e7146100d85780635e81300a146100d3578063a6e158f8146100ce578063c99eea9b146100c9578063d03c534c146100c4578063ea747b8c146100bf578063eab8b4e0146100ba578063ec6976af146100b5578063f32845be146100b05763fd57536d0361000e57610a94565b610994565b610960565b61092c565b6108bb565b610833565b610596565b610398565b610344565b6102e1565b61028b565b610200565b61019f565b60e01c90565b60405190565b5f80fd5b5f80fd5b90565b61010c81610100565b0361011357565b5f80fd5b9050359061012482610103565b565b60018060a01b031690565b61013a90610126565b90565b61014681610131565b0361014d57565b5f80fd5b9050359061015e8261013d565b565b90916060828403126101955761019261017b845f8501610117565b936101898160208601610151565b93604001610117565b90565b6100fc565b5f0190565b346101ce576101b86101b2366004610160565b91612c00565b6101c06100f2565b806101ca8161019a565b0390f35b6100f8565b91906040838203126101fb57806101ef6101f8925f8601610117565b93602001610117565b90565b6100fc565b3461022f576102196102133660046101d3565b90611e50565b6102216100f2565b8061022b8161019a565b0390f35b6100f8565b6004111561023e57565b5f80fd5b9050359061024f82610234565b565b90916060828403126102865761028361026c845f8501610117565b9361027a8160208601610151565b93604001610242565b90565b6100fc565b346102ba576102a461029e366004610251565b91612ad6565b6102ac6100f2565b806102b68161019a565b0390f35b6100f8565b6102c890610100565b9052565b91906102df905f602085019401906102bf565b565b346103125761030e6102fd6102f73660046101d3565b90612cd2565b6103056100f2565b918291826102cc565b0390f35b6100f8565b919060408382031261033f578061033361033c925f8601610117565b93602001610151565b90565b6100fc565b346103755761037161036061035a366004610317565b90612e02565b6103686100f2565b918291826102cc565b0390f35b6100f8565b9060208282031261039357610390915f01610117565b90565b6100fc565b346103bf576103a836600461037a565b506103b16100f2565b806103bb8161019a565b0390f35b6100f8565b5190565b60209181520190565b60200190565b6103e090610100565b9052565b6103ed90610131565b9052565b634e487b7160e01b5f52602160045260245ffd5b6002111561040f57565b6103f1565b9061041e82610405565b565b61042990610414565b90565b61043590610420565b9052565b151590565b61044790610439565b9052565b9061014080610514936104645f8201515f8601906103d7565b610476602082015160208601906103e4565b610488604082015160408601906103d7565b61049a606082015160608601906103d7565b6104ac608082015160808601906103d7565b6104be60a082015160a08601906103d7565b6104d060c082015160c08601906103d7565b6104e260e082015160e08601906103d7565b6104f661010082015161010086019061042c565b61050a6101208201516101208601906103d7565b015191019061043e565b565b90610524816101609361044b565b0190565b60200190565b9061054b61054561053e846103c4565b80936103c8565b926103d1565b905f5b81811061055b5750505090565b90919261057461056e6001928651610516565b94610528565b910191909161054e565b6105939160208201915f81840391015261052e565b90565b346105c7576105c36105b26105ac366004610317565b906131fe565b6105ba6100f2565b9182918261057e565b0390f35b6100f8565b634e487b7160e01b5f52603260045260245ffd5b5490565b5f5260205f2090565b6105f6816105e0565b82101561061057610608600b916105e4565b910201905f90565b6105cc565b5f1c90565b90565b61062961062e91610615565b61061a565b90565b61063b905461061d565b90565b60018060a01b031690565b61065561065a91610615565b61063e565b90565b6106679054610649565b90565b60ff1690565b61067c61068191610615565b61066a565b90565b61068e9054610670565b90565b60ff1690565b6106a36106a891610615565b610691565b90565b6106b59054610697565b90565b6002906106c4826105e0565b811015610764576106d4916105ed565b506106e05f8201610631565b916106ed6001830161065d565b916106fa60028201610631565b9161070760038301610631565b9161071460048201610631565b9161072160058301610631565b9161072e60068201610631565b9161073b60078301610631565b9161074860088201610684565b91610761600a61075a60098501610631565b93016106ab565b90565b5f80fd5b61077190610131565b9052565b61077e90610420565b9052565b61078b90610439565b9052565b98969492909b9a99979593916101608a019c5f8b016107ad916102bf565b60208a016107ba91610768565b604089016107c7916102bf565b606088016107d4916102bf565b608087016107e1916102bf565b60a086016107ee916102bf565b60c085016107fb916102bf565b60e08401610808916102bf565b610100830161081691610775565b6101208201610824916102bf565b6101400161083191610782565b565b346108705761086c61084e61084936600461037a565b6106b8565b976108639b999b9791979692969593956100f2565b9b8c9b8c61078f565b0390f35b6100f8565b6080818303126108b65761088b825f8301610117565b926108b361089c8460208501610151565b936108aa8160408601610117565b93606001610117565b90565b6100fc565b346108ed576108d76108ce366004610875565b92919091611d29565b6108df6100f2565b806108e98161019a565b0390f35b6100f8565b90916060828403126109275761092461090d845f8501610117565b9361091b8160208601610117565b93604001610151565b90565b6100fc565b3461095b5761094561093f3660046108f2565b91611440565b61094d6100f2565b806109578161019a565b0390f35b6100f8565b3461098f576109796109733660046101d3565b90610c63565b6109816100f2565b8061098b8161019a565b0390f35b6100f8565b346109c4576109c06109af6109aa36600461037a565b61307e565b6109b76100f2565b9182918261057e565b0390f35b6100f8565b600211156109d357565b5f80fd5b905035906109e4826109c9565b565b919061016083820312610a8f576109ff815f8501610117565b92610a0d8260208301610151565b92610a1b8360408401610117565b92610a298160608501610117565b92610a378260808301610117565b92610a458360a08401610117565b92610a538160c08501610117565b92610a618260e08301610117565b92610a8c610a738461010085016109d7565b93610a82816101208601610117565b9361014001610117565b90565b6100fc565b34610ad157610acd610abc610aaa3660046109e6565b99989098979197969296959395612859565b610ac46100f2565b918291826102cc565b0390f35b6100f8565b5f80fd5b90565b610af1610aec610af692610126565b610ada565b610126565b90565b610b0290610add565b90565b610b0e90610af9565b90565b90610b1b90610b05565b5f5260205260405f2090565b60ff1690565b610b39610b3e91610615565b610b27565b90565b610b4b9054610b2d565b90565b60041115610b5857565b6103f1565b90610b6782610b4e565b565b610b7290610b5d565b90565b610b7e90610b69565b9052565b604090610bab610bb29496959396610ba160608401985f8501906102bf565b6020830190610b75565b0190610b75565b565b919082600193610bd06004610bca5f3390610b11565b01610b41565b610be2610bdc87610b5d565b91610b5d565b03610bf55750610bf3929350610c32565b565b8490610c2e610c106004610c0a5f3390610b11565b01610b41565b610c186100f2565b93849363324590cf60e21b855260048501610b82565b0390fd5b90610c619190337f00000000000000000000000000000000000000000000000000000000000000009192610f9e565b565b90610c6d91610bb4565b565b916020610c90929493610c8960408201965f8301906102bf565b0190610768565b565b93929190848195610caf6004610ca95f8a90610b11565b01610b41565b610cc1610cbb5f610b5d565b91610b5d565b14610cd45750610cd2949550610cfb565b565b8690610cf7610ce16100f2565b92839263192e7f7360e11b845260048401610c6f565b0390fd5b93929190848295610d186004610d125f8a90610b11565b01610b41565b610d2a610d245f610b5d565b91610b5d565b14610d3d5750610d3b949550610d96565b565b8690610d60610d4a6100f2565b92839263192e7f7360e11b845260048401610c6f565b0390fd5b604090610d8d610d949496959396610d8360608401985f8501906102bf565b60208301906102bf565b01906102bf565b565b939291908481958490610db45f610dae818b90610b11565b01610631565b610dc6610dc084610100565b91610100565b10610dda575050610dd8949550610f0d565b565b90610e13610df55f610def8b95949582610b11565b01610631565b610dfd6100f2565b938493631608a02160e01b855260048501610d64565b0390fd5b634e487b7160e01b5f52601160045260245ffd5b610e3a610e4091939293610100565b92610100565b8203918211610e4b57565b610e17565b5f1b90565b90610e615f1991610e50565b9181191691161790565b610e7f610e7a610e8492610100565b610ada565b610100565b90565b90565b90610e9f610e9a610ea692610e6b565b610e87565b8254610e55565b9055565b610eb9610ebf91939293610100565b92610100565b8201809211610eca57565b610e17565b610f04610f0b94610efa606094989795610ef0608086019a5f8701906102bf565b6020850190610768565b6040830190610768565b01906102bf565b565b610f9990610f3a85610f345f610f24818890610b11565b0191610f2f83610631565b610e2b565b90610e8a565b610f6385610f5d5f610f4d818990610b11565b0191610f5883610631565b610eaa565b90610e8a565b9192937f2e578e436685c8ee906431b002661f41d45a790b565ca7b6f06ae35bfae01a7694610f906100f2565b94859485610ecf565b0390a1565b90610faa939291610c92565b565b92919083600194610fc96004610fc35f3390610b11565b01610b41565b610fdb610fd588610b5d565b91610b5d565b03610fee5750610fec939450611069565b565b859061102761100960046110035f3390610b11565b01610b41565b6110116100f2565b93849363324590cf60e21b855260048501610b82565b0390fd5b6110606110679461105660609498979561104c608086019a5f8701906102bf565b6020850190610768565b6040830190610b75565b0190610b75565b565b929190838260029561108760046110815f8590610b11565b01610b41565b61109961109389610b5d565b91610b5d565b036110ad5750506110ab93945061121d565b565b906110ea8792916110cb60046110c58396935f610b11565b01610b41565b906110d46100f2565b948594631dac48b760e11b86526004860161102b565b0390fd5b906110f890610e6b565b5f5260205260405f2090565b90565b61111b61111661112092611104565b610ada565b610100565b90565b91602061114492949361113d60408201965f8301906102bf565b01906102bf565b565b5490565b5f5260205f2090565b61115c81611146565b8210156111765761116e60049161114a565b910201905f90565b6105cc565b90565b90565b6111b66111bd946111ac6060949897956111a2608086019a5f8701906102bf565b60208501906102bf565b6040830190610768565b0190610768565b565b634e487b7160e01b5f52600160045260245ffd5b156111da57565b6111bf565b61121461121b9461120a606094989795611200608086019a5f8701906102bf565b60208501906102bf565b60408301906102bf565b01906102bf565b565b92919083338395839161124661124160026112395f8590610b11565b0185906110ee565b610631565b806112596112535f611107565b91610100565b146113ae5761127f61127960036112715f8690610b11565b018390611153565b5061117b565b986112a161129b8b611295600160029201610631565b906105ed565b5061117e565b906112ae6001830161065d565b6112c06112ba83610131565b91610131565b0361136f5750506112ef6112d660038b016106ab565b6112e86112e25f610439565b91610439565b14156111d3565b6112fb60028a01610631565b61130d61130742610100565b91610100565b1061132357505050506113219394506113d5565b565b9161133361136b928a9594611672565b919261134d600261134660018401610631565b9201610631565b906113566100f2565b9485946245f34760e41b8652600486016111df565b0390fd5b6113aa8b9161138c6001611385818a9601610631565b950161065d565b6113946100f2565b948594630b37bb9360e11b865260048601611181565b0390fd5b50506113d16113bb6100f2565b92839263cd5dbc4f60e01b845260048401611123565b0390fd5b9190916114026113fb6113f660026113ee5f3390610b11565b0186906110ee565b610631565b3390611672565b61143b3392937f48d1eb8434432b178452473c313c00292893f57718970b914ebe9472b6e3f571946114326100f2565b94859485610ecf565b0390a1565b9061144b9291610fac565b565b90565b61146461145f6114699261144d565b610ada565b610100565b90565b634e487b7160e01b5f525f60045260245ffd5b9061148b60ff91610e50565b9181191691161790565b61149e90610439565b90565b90565b906114b96114b46114c092611495565b6114a1565b825461147f565b9055565b908082036114d1575b5050565b61152c600380846114f25f61153297016114ec5f8801610631565b90610e8a565b61150b6001820161150560018801610631565b90610e8a565b6115246002820161151e60028801610631565b90610e8a565b0192016106ab565b906114a4565b5f806114cd565b919061154a57611548916114c4565b565b61146c565b90565b634e487b7160e01b5f52603160045260245ffd5b5490565b5f5260205f2090565b61157c81611566565b8210156115965761158e60049161156a565b910201905f90565b6105cc565b1b90565b919060086115ba9102916115b45f198461159b565b9261159b565b9181191691161790565b91906115da6115d56115e293610e6b565b610e87565b90835461159f565b9055565b5f90565b6115fc916115f66115e6565b916115c4565b565b60035f9161160e838083016115ea565b61161b83600183016115ea565b61162883600283016115ea565b0155565b905f0361163e5761163c906115fe565b565b61146c565b61164c81611566565b801561166d57600190039061166a6116648383611573565b9061162c565b55565b611552565b6117725f91600261176c611777956117666116ac61169c60036116968a8690610b11565b01611146565b6116a66001611450565b90610e2b565b946117096116ea6116d68a6116cf60036116c7838a90610b11565b018690611153565b5001610631565b9760036116e48c8890610b11565b01611153565b5061170360036116fb8c8890610b11565b018490611153565b90611539565b61176161172f896117286003611720838990610b11565b018590611153565b5001610631565b9161174e61174960036117438d8990610b11565b0161154f565b611643565b918661175b8b8790610b11565b016110ee565b610e8a565b85610b11565b016110ee565b6115ea565b565b939291908460019561179760046117915f3390610b11565b01610b41565b6117a96117a389610b5d565b91610b5d565b036117bc57506117ba9495506117f9565b565b86906117f56117d760046117d15f3390610b11565b01610b41565b6117df6100f2565b93849363324590cf60e21b855260048501610b82565b0390fd5b93929190848160029661181860046118125f8590610b11565b01610b41565b61182a6118248a610b5d565b91610b5d565b0361183e57505061183c94955061187f565b565b9061187b88929161185c60046118568396935f610b11565b01610b41565b906118656100f2565b948594631dac48b760e11b86526004860161102b565b0390fd5b939291908482849661189c611896600284906105ed565b5061117e565b906118b26118ac600a84016106ab565b15610439565b611921576118c260038301610631565b6118d46118ce8b610100565b91610100565b106118e9575050506118e7949550611b38565b565b8892916118fe600361191d9394959201610631565b906119076100f2565b948594632a1546bd60e11b8652600486016111df565b0390fd5b905061194461192e6100f2565b92839263144b924160e11b845260048401611123565b0390fd5b90565b61195490610100565b5f1981146119625760010190565b610e17565b601f801991011690565b634e487b7160e01b5f52604160045260245ffd5b9061198f90611967565b810190811067ffffffffffffffff8211176119a957604052565b611971565b906119c16119ba6100f2565b9283611985565b565b6119cd60806119ae565b90565b906119da90610100565b9052565b906119e890610439565b9052565b6119f69051610100565b90565b611a039051610439565b90565b90611a6360606003611a6994611a295f8201611a235f88016119ec565b90610e8a565b611a4260018201611a3c602088016119ec565b90610e8a565b611a5b60028201611a55604088016119ec565b90610e8a565b0192016119f9565b906114a4565b565b9190611a7c57611a7a91611a06565b565b61146c565b9081549168010000000000000000831015611ab15782611aa9916001611aaf95018155611573565b90611a6b565b565b611971565b611ac5611acb91939293610100565b92610100565b91611ad7838202610100565b928184041490151715611ae657565b610e17565b90959492611b3694611b25611b2f92611b1b608096611b1160a088019c5f8901906102bf565b6020870190610768565b6040850190610768565b60608301906102bf565b01906102bf565b565b929091611b4e611b495f3390610b11565b611948565b91611b5b60018401610631565b93611b6860038501611146565b96611b7e611b78600286906105ed565b5061117e565b92611b956003611b8f5f3390610b11565b0161154f565b92611b9f5f611107565b975b88611bb4611bae85610100565b91610100565b1015611c6c57611c5f611c4e611c6592611c3e8b8f6002611c3991611c308f8f8f611c2b9091611c22611bf68c9592611bf06009429201610631565b90610eaa565b611c19600193611c10611c076119c3565b985f8a016119d0565b602088016119d0565b604086016119d0565b606084016119de565b611a81565b920184906110ee565b610e8a565b611c486001611450565b90610eaa565b9b611c596001611450565b90610eaa565b9861194b565b9799611ba1565b611cc2939a50611d24969995929850611ced9450966001611c8f92989101610e8a565b611caf87611ca96003840191611ca483610631565b610e2b565b90610e8a565b611cbc6002889201610631565b90611ab6565b8290337f00000000000000000000000000000000000000000000000000000000000000009192610f9e565b919233947fc19f12d44b95c1a221ab57e69ec538ff5181f820f28f967108426da285ab9a6b95611d1b6100f2565b95869586611aeb565b0390a1565b90611d35939291611779565b565b919082600293611d536004611d4d5f3390610b11565b01610b41565b611d65611d5f87610b5d565b91610b5d565b03611d785750611d76929350611db5565b565b8490611db1611d936004611d8d5f3390610b11565b01610b41565b611d9b6100f2565b93849363324590cf60e21b855260048501610b82565b0390fd5b611dd6611dd0600a611dc9600286906105ed565b50016106ab565b15610439565b611e4c57611df26001611deb600285906105ed565b500161065d565b611e04611dfe33610131565b91610131565b03611e255750611e2390600a611e1c5f9260026105ed565b50016114a4565b565b3390611e48611e326100f2565b928392633883f44560e01b845260048401610c6f565b0390fd5b5050565b90611e5a91611d37565b565b9b9a99989796959493929190809c60039d8e611e96611e90611e8a6004611e845f3390610b11565b01610b41565b92610b5d565b91610b5d565b03611eaa5750611ea79c9d5061250f565b90565b8e90611ee3611ec56004611ebf5f3390610b11565b01610b41565b611ecd6100f2565b93849363324590cf60e21b855260048501610b82565b0390fd5b60209181520190565b5f7f636f756e742073686f756c64206265203e203000000000000000000000000000910152565b611f246013602092611ee7565b611f2d81611ef0565b0190565b90611f5491611f4760408201925f8301906102bf565b6020818303910152611f17565b90565b5f7f636f73742073686f756c64206265203e3d203000000000000000000000000000910152565b611f8b6013602092611ee7565b611f9481611f57565b0190565b90611fbb91611fae60408201925f8301906102bf565b6020818303910152611f7e565b90565b90565b611fd5611fd0611fda92611fbe565b610ada565b610100565b90565b60207f3030000000000000000000000000000000000000000000000000000000000000917f646973636f756e742073686f756c64206265203e3d203020616e64203c3d20315f8201520152565b6120376022604092611ee7565b61204081611fdd565b0190565b906120679161205a60408201925f8301906102bf565b602081830391015261202a565b90565b60407f65206e6567617469766500000000000000000000000000000000000000000000917f7768656e20636f75706f6e20747970652069732063617465676f7279207769735f8201527f65207468656e2070726f6475637443617465676f726965732063616e2774206260208201520152565b6120ea604a606092611ee7565b6120f38161206a565b0190565b9061211a9161210d60408201925f8301906102bf565b60208183039101526120dd565b90565b60407f7665000000000000000000000000000000000000000000000000000000000000917f7768656e20636f75706f6e20747970652069732063617465676f7279207769735f8201527f65207468656e207468726573686f6c642063616e2774206265206e656761746960208201520152565b61219d6042606092611ee7565b6121a68161211d565b0190565b906121cd916121c060408201925f8301906102bf565b6020818303910152612190565b90565b60207f70726f6475637449642063616e2774206265206e656761746976650000000000917f7768656e20636f75706f6e207479706520697320756e69717565207468656e205f8201520152565b61222a603b604092611ee7565b612233816121d0565b0190565b9061225a9161224d60408201925f8301906102bf565b602081830391015261221d565b90565b5f7f65787069727954696d65206d757374206265203e203000000000000000000000910152565b6122916016602092611ee7565b61229a8161225d565b0190565b906122c1916122b460408201925f8301906102bf565b6020818303910152612284565b90565b90565b6122d26101606119ae565b90565b906122df90610131565b9052565b906122ed90610414565b9052565b5f5260205f2090565b5490565b612307816122fa565b82101561232157612319600b916122f1565b910201905f90565b6105cc565b6123309051610131565b90565b9061234460018060a01b0391610e50565b9181191691161790565b90565b9061236661236161236d92610b05565b61234e565b8254612333565b9055565b61237b9051610414565b90565b61238790610414565b90565b90565b906123a261239d6123a99261237e565b61238a565b825461147f565b9055565b906124bc610140600a6124c2946123d15f82016123cb5f88016119ec565b90610e8a565b6123ea600182016123e460208801612326565b90612351565b612403600282016123fd604088016119ec565b90610e8a565b61241c60038201612416606088016119ec565b90610e8a565b6124356004820161242f608088016119ec565b90610e8a565b61244e6005820161244860a088016119ec565b90610e8a565b6124676006820161246160c088016119ec565b90610e8a565b6124806007820161247a60e088016119ec565b90610e8a565b61249a600882016124946101008801612371565b9061238d565b6124b4600982016124ae61012088016119ec565b90610e8a565b0192016119f9565b906114a4565b565b91906124d5576124d3916123ad565b565b61146c565b908154916801000000000000000083101561250a5782612502916001612508950181556122fe565b906124c4565b565b611971565b9a989294969a999395979199508461252f6125295f611107565b91610100565b111561283357856125486125425f611107565b91610100565b1061280d578661256061255a5f611107565b91610100565b1080156127f2575b6127cc578261258061257a6001610414565b91610414565b145f14612731578161259a6125945f611107565b91610100565b1061270b575b836125b36125ad5f611107565b91610100565b11156126e557506125c46001610631565b9960026125d0906122c4565b978b978b9796909192939495966001986125e86122c7565b9a5f8c01906125f6916119d0565b60208b0190612604916122d5565b60408a0190612612916119d0565b6060890190612620916119d0565b608088019061262e916119d0565b60a087019061263c916119d0565b60c086019061264a916119d0565b60e0850190612658916119d0565b610100840190612667916122e3565b610120830190612676916119d0565b610140820190612685916119de565b61268e916124da565b905f9061269a91610b11565b5f01906126a682610631565b906126b091610e2b565b6126b991610e8a565b6126c36001610631565b60016126ce90611450565b6126d791610eaa565b6126e2906001610e8a565b90565b612707906126f16100f2565b918291631f0454c360e11b83526004830161229e565b0390fd5b61272d906127176100f2565b918291631f0454c360e11b835260048301612237565b0390fd5b8261274461273e5f610414565b91610414565b1461274f575b6125a0565b8761276261275c5f611107565b91610100565b106127a6578a61277a6127745f611107565b91610100565b101561274a576127a29061278c6100f2565b918291631f0454c360e11b8352600483016121aa565b0390fd5b6127c8906127b26100f2565b918291631f0454c360e11b8352600483016120f7565b0390fd5b6127ee906127d86100f2565b918291631f0454c360e11b835260048301612044565b0390fd5b50866128076128016064611fc1565b91610100565b11612568565b61282f906128196100f2565b918291631f0454c360e11b835260048301611f98565b0390fd5b6128559061283f6100f2565b918291631f0454c360e11b835260048301611f31565b0390fd5b906128749a99989796959493929161286f6115e6565b611e5c565b90565b92919083600394612894600461288e5f3390610b11565b01610b41565b6128a66128a088610b5d565b91610b5d565b036128b957506128b793945061297a565b565b85906128f26128d460046128ce5f3390610b11565b01610b41565b6128dc6100f2565b93849363324590cf60e21b855260048501610b82565b0390fd5b91602061291792949361291060408201965f8301906102bf565b0190610b75565b565b61292290610b5d565b90565b90565b9061293d61293861294492612919565b612925565b825461147f565b9055565b604090612971612978949695939661296760608401985f8501906102bf565b6020830190610768565b0190610b75565b565b919091612993600461298d5f8690610b11565b01610b41565b6129a561299f5f610b5d565b91610b5d565b03612a9b57612a5d6129c06129bb5f8690610b11565b611948565b6129d46129cc5f611107565b5f8301610e8a565b6129e18460048301612928565b612a4b6129f06003830161154f565b5f90612a465f612a3d612a345f612a2f612a265f95612a21612a19612a136119c3565b9b611107565b5f8c016119d0565b611107565b602089016119d0565b611107565b604086016119d0565b606084016119de565b611a81565b6001612a5681611450565b9101610e8a565b919091612a967fcf5372d965b8a6c9a60a3fff29e749a3373cdb5251da091443f0660a0f602db493612a8d6100f2565b93849384612948565b0390a1565b612ab06004612aaa855f610b11565b01610b41565b90612ad2612abc6100f2565b92839263d808441760e01b8452600484016128f6565b0390fd5b90612ae19291612877565b565b92919083600394612b006004612afa5f3390610b11565b01610b41565b612b12612b0c88610b5d565b91610b5d565b03612b255750612b23939450612b62565b565b8590612b5e612b406004612b3a5f3390610b11565b01610b41565b612b486100f2565b93849363324590cf60e21b855260048501610b82565b0390fd5b9291612b7a6004612b745f8590610b11565b01610b41565b612b8d612b876003610b5d565b91610b5d565b14612bc357612bc19293917f0000000000000000000000000000000000000000000000000000000000000000909192610f9e565b565b50612bda6004612bd485935f610b11565b01610b41565b90612bfc612be66100f2565b9283926320fb868f60e11b8452600484016128f6565b0390fd5b90612c0b9291612ae3565b565b9291908093600394612c2b6004612c255f3390610b11565b01610b41565b612c3d612c3788610b5d565b91610b5d565b03612c515750612c4e939450612c8e565b90565b8590612c8a612c6c6004612c665f3390610b11565b01610b41565b612c746100f2565b93849363324590cf60e21b855260048501610b82565b0390fd5b612cba92915050612cb45f612ca4813390610b11565b0191612caf83610631565b610eaa565b90610e8a565b612ccf5f612cc9813390610b11565b01610631565b90565b90612ce491612cdf6115e6565b612c0d565b90565b92919081938133612d20612d1a7f0000000000000000000000000000000000000000000000000000000000000000610131565b91610131565b141580612d62575b612d3b5750612d38939450612d7d565b90565b8590612d5e612d486100f2565b928392633883f44560e01b845260048401610c6f565b0390fd5b5033612d76612d7088610131565b91610131565b1415612d28565b92919080938294612d9a6004612d945f8990610b11565b01610b41565b612dac612da65f610b5d565b91610b5d565b14612dc05750612dbd939450612de7565b90565b8590612de3612dcd6100f2565b92839263192e7f7360e11b845260048401610c6f565b0390fd5b5f9150612dff92612df9915082610b11565b01610631565b90565b90612e1491612e0f6115e6565b612ce7565b90565b606090565b919080923393612e386004612e325f8890610b11565b01610b41565b612e4a612e445f610b5d565b91610b5d565b14612e5e5750612e5b929350612fd3565b90565b8490612e81612e6b6100f2565b92839263192e7f7360e11b845260048401610c6f565b0390fd5b90612e8f826103c4565b811015612ea0576020809102010190565b6105cc565b612eb06101606119ae565b90565b90612fc5612fbb600a612ec4612ea5565b94612edb612ed35f8301610631565b5f88016119d0565b612ef3612eea6001830161065d565b602088016122d5565b612f0b612f0260028301610631565b604088016119d0565b612f23612f1a60038301610631565b606088016119d0565b612f3b612f3260048301610631565b608088016119d0565b612f53612f4a60058301610631565b60a088016119d0565b612f6b612f6260068301610631565b60c088016119d0565b612f83612f7a60078301610631565b60e088016119d0565b612f9c612f9260088301610684565b61010088016122e3565b612fb5612fab60098301610631565b61012088016119d0565b016106ab565b61014084016119de565b565b612fd090612eb3565b90565b905050612fde612e17565b612fe75f611107565b612ff05f611107565b5b8061300d61300761300260026105e0565b610100565b91610100565b1015613079576130399061302f600a613028600284906105ed565b50016106ab565b61303e575b61194b565b612ff1565b61307261304d600283906105ed565b508561306261305b8761194b565b9692612fc7565b61306c8383612e85565b52612e85565b5150613034565b505090565b61308f9061308a612e17565b612e1c565b90565b9291908093826002956130b160046130ab5f8590610b11565b01610b41565b6130c36130bd89610b5d565b91610b5d565b036130d85750506130d5939450613119565b90565b906131158792916130f660046130f08396935f610b11565b01610b41565b906130ff6100f2565b948594631dac48b760e11b86526004860161102b565b0390fd5b905050613124612e17565b61312d5f611107565b906131375f611107565b5b8061315461314e61314960026105e0565b610100565b91610100565b10156131f75761318690613176600a61316f600284906105ed565b50016106ab565b806131c6575b61318b575b61194b565b613138565b6131bf61319a600283906105ed565b50846131af6131a88861194b565b9792612fc7565b6131b98383612e85565b52612e85565b5150613181565b506131df60016131d8600284906105ed565b500161065d565b6131f16131eb87610131565b91610131565b1461317c565b5091505090565b906132109161320b612e17565b613092565b9056fea2646970667358221220980c3d614f22b3157cc73883308b059b28d8e3cc7def92fadd24d8d5722bbf7664736f6c63430008150033",
}

// ApiABI is the input ABI used to generate the binding from.
// Deprecated: Use ApiMetaData.ABI instead.
var ApiABI = ApiMetaData.ABI

// ApiBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use ApiMetaData.Bin instead.
var ApiBin = ApiMetaData.Bin

// DeployApi deploys a new Ethereum contract, binding an instance of Api to it.
func DeployApi(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *Api, error) {
	parsed, err := ApiMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(ApiBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &Api{ApiCaller: ApiCaller{contract: contract}, ApiTransactor: ApiTransactor{contract: contract}, ApiFilterer: ApiFilterer{contract: contract}}, nil
}

// Api is an auto generated Go binding around an Ethereum contract.
type Api struct {
	ApiCaller     // Read-only binding to the contract
	ApiTransactor // Write-only binding to the contract
	ApiFilterer   // Log filterer for contract events
}

// ApiCaller is an auto generated read-only Go binding around an Ethereum contract.
type ApiCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ApiTransactor is an auto generated write-only Go binding around an Ethereum contract.
type ApiTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ApiFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type ApiFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ApiSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type ApiSession struct {
	Contract     *Api              // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// ApiCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type ApiCallerSession struct {
	Contract *ApiCaller    // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts // Call options to use throughout this session
}

// ApiTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type ApiTransactorSession struct {
	Contract     *ApiTransactor    // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// ApiRaw is an auto generated low-level Go binding around an Ethereum contract.
type ApiRaw struct {
	Contract *Api // Generic contract binding to access the raw methods on
}

// ApiCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type ApiCallerRaw struct {
	Contract *ApiCaller // Generic read-only contract binding to access the raw methods on
}

// ApiTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type ApiTransactorRaw struct {
	Contract *ApiTransactor // Generic write-only contract binding to access the raw methods on
}

// NewApi creates a new instance of Api, bound to a specific deployed contract.
func NewApi(address common.Address, backend bind.ContractBackend) (*Api, error) {
	contract, err := bindApi(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &Api{ApiCaller: ApiCaller{contract: contract}, ApiTransactor: ApiTransactor{contract: contract}, ApiFilterer: ApiFilterer{contract: contract}}, nil
}

// NewApiCaller creates a new read-only instance of Api, bound to a specific deployed contract.
func NewApiCaller(address common.Address, caller bind.ContractCaller) (*ApiCaller, error) {
	contract, err := bindApi(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &ApiCaller{contract: contract}, nil
}

// NewApiTransactor creates a new write-only instance of Api, bound to a specific deployed contract.
func NewApiTransactor(address common.Address, transactor bind.ContractTransactor) (*ApiTransactor, error) {
	contract, err := bindApi(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &ApiTransactor{contract: contract}, nil
}

// NewApiFilterer creates a new log filterer instance of Api, bound to a specific deployed contract.
func NewApiFilterer(address common.Address, filterer bind.ContractFilterer) (*ApiFilterer, error) {
	contract, err := bindApi(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &ApiFilterer{contract: contract}, nil
}

// bindApi binds a generic wrapper to an already deployed contract.
func bindApi(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := ApiMetaData.GetAbi()
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, *parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Api *ApiRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _Api.Contract.ApiCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Api *ApiRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Api.Contract.ApiTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Api *ApiRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Api.Contract.ApiTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Api *ApiCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _Api.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Api *ApiTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Api.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Api *ApiTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Api.Contract.contract.Transact(opts, method, params...)
}

// CouponList is a free data retrieval call binding the contract method 0xd03c534c.
//
// Solidity: function couponList(uint256 ) view returns(uint256 couponId, address issuerBusiness, uint256 superCoins, uint256 count, uint256 discount, uint256 productCategory, uint256 thresholdValue, uint256 productId, uint8 couponType, uint256 expiryTime, bool active)
func (_Api *ApiCaller) CouponList(opts *bind.CallOpts, arg0 *big.Int) (struct {
	CouponId        *big.Int
	IssuerBusiness  common.Address
	SuperCoins      *big.Int
	Count           *big.Int
	Discount        *big.Int
	ProductCategory *big.Int
	ThresholdValue  *big.Int
	ProductId       *big.Int
	CouponType      uint8
	ExpiryTime      *big.Int
	Active          bool
}, error) {
	var out []interface{}
	err := _Api.contract.Call(opts, &out, "couponList", arg0)

	outstruct := new(struct {
		CouponId        *big.Int
		IssuerBusiness  common.Address
		SuperCoins      *big.Int
		Count           *big.Int
		Discount        *big.Int
		ProductCategory *big.Int
		ThresholdValue  *big.Int
		ProductId       *big.Int
		CouponType      uint8
		ExpiryTime      *big.Int
		Active          bool
	})
	if err != nil {
		return *outstruct, err
	}

	outstruct.CouponId = *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)
	outstruct.IssuerBusiness = *abi.ConvertType(out[1], new(common.Address)).(*common.Address)
	outstruct.SuperCoins = *abi.ConvertType(out[2], new(*big.Int)).(**big.Int)
	outstruct.Count = *abi.ConvertType(out[3], new(*big.Int)).(**big.Int)
	outstruct.Discount = *abi.ConvertType(out[4], new(*big.Int)).(**big.Int)
	outstruct.ProductCategory = *abi.ConvertType(out[5], new(*big.Int)).(**big.Int)
	outstruct.ThresholdValue = *abi.ConvertType(out[6], new(*big.Int)).(**big.Int)
	outstruct.ProductId = *abi.ConvertType(out[7], new(*big.Int)).(**big.Int)
	outstruct.CouponType = *abi.ConvertType(out[8], new(uint8)).(*uint8)
	outstruct.ExpiryTime = *abi.ConvertType(out[9], new(*big.Int)).(**big.Int)
	outstruct.Active = *abi.ConvertType(out[10], new(bool)).(*bool)

	return *outstruct, err

}

// CouponList is a free data retrieval call binding the contract method 0xd03c534c.
//
// Solidity: function couponList(uint256 ) view returns(uint256 couponId, address issuerBusiness, uint256 superCoins, uint256 count, uint256 discount, uint256 productCategory, uint256 thresholdValue, uint256 productId, uint8 couponType, uint256 expiryTime, bool active)
func (_Api *ApiSession) CouponList(arg0 *big.Int) (struct {
	CouponId        *big.Int
	IssuerBusiness  common.Address
	SuperCoins      *big.Int
	Count           *big.Int
	Discount        *big.Int
	ProductCategory *big.Int
	ThresholdValue  *big.Int
	ProductId       *big.Int
	CouponType      uint8
	ExpiryTime      *big.Int
	Active          bool
}, error) {
	return _Api.Contract.CouponList(&_Api.CallOpts, arg0)
}

// CouponList is a free data retrieval call binding the contract method 0xd03c534c.
//
// Solidity: function couponList(uint256 ) view returns(uint256 couponId, address issuerBusiness, uint256 superCoins, uint256 count, uint256 discount, uint256 productCategory, uint256 thresholdValue, uint256 productId, uint8 couponType, uint256 expiryTime, bool active)
func (_Api *ApiCallerSession) CouponList(arg0 *big.Int) (struct {
	CouponId        *big.Int
	IssuerBusiness  common.Address
	SuperCoins      *big.Int
	Count           *big.Int
	Discount        *big.Int
	ProductCategory *big.Int
	ThresholdValue  *big.Int
	ProductId       *big.Int
	CouponType      uint8
	ExpiryTime      *big.Int
	Active          bool
}, error) {
	return _Api.Contract.CouponList(&_Api.CallOpts, arg0)
}

// GetAccountBalance is a free data retrieval call binding the contract method 0x5e81300a.
//
// Solidity: function getAccountBalance(uint256 transactionId, address person) view returns(uint256)
func (_Api *ApiCaller) GetAccountBalance(opts *bind.CallOpts, transactionId *big.Int, person common.Address) (*big.Int, error) {
	var out []interface{}
	err := _Api.contract.Call(opts, &out, "getAccountBalance", transactionId, person)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetAccountBalance is a free data retrieval call binding the contract method 0x5e81300a.
//
// Solidity: function getAccountBalance(uint256 transactionId, address person) view returns(uint256)
func (_Api *ApiSession) GetAccountBalance(transactionId *big.Int, person common.Address) (*big.Int, error) {
	return _Api.Contract.GetAccountBalance(&_Api.CallOpts, transactionId, person)
}

// GetAccountBalance is a free data retrieval call binding the contract method 0x5e81300a.
//
// Solidity: function getAccountBalance(uint256 transactionId, address person) view returns(uint256)
func (_Api *ApiCallerSession) GetAccountBalance(transactionId *big.Int, person common.Address) (*big.Int, error) {
	return _Api.Contract.GetAccountBalance(&_Api.CallOpts, transactionId, person)
}

// GetAllCoupons is a free data retrieval call binding the contract method 0xf32845be.
//
// Solidity: function getAllCoupons(uint256 transactionId) view returns((uint256,address,uint256,uint256,uint256,uint256,uint256,uint256,uint8,uint256,bool)[])
func (_Api *ApiCaller) GetAllCoupons(opts *bind.CallOpts, transactionId *big.Int) ([]LoyaltyProgrammeCoupon, error) {
	var out []interface{}
	err := _Api.contract.Call(opts, &out, "getAllCoupons", transactionId)

	if err != nil {
		return *new([]LoyaltyProgrammeCoupon), err
	}

	out0 := *abi.ConvertType(out[0], new([]LoyaltyProgrammeCoupon)).(*[]LoyaltyProgrammeCoupon)

	return out0, err

}

// GetAllCoupons is a free data retrieval call binding the contract method 0xf32845be.
//
// Solidity: function getAllCoupons(uint256 transactionId) view returns((uint256,address,uint256,uint256,uint256,uint256,uint256,uint256,uint8,uint256,bool)[])
func (_Api *ApiSession) GetAllCoupons(transactionId *big.Int) ([]LoyaltyProgrammeCoupon, error) {
	return _Api.Contract.GetAllCoupons(&_Api.CallOpts, transactionId)
}

// GetAllCoupons is a free data retrieval call binding the contract method 0xf32845be.
//
// Solidity: function getAllCoupons(uint256 transactionId) view returns((uint256,address,uint256,uint256,uint256,uint256,uint256,uint256,uint8,uint256,bool)[])
func (_Api *ApiCallerSession) GetAllCoupons(transactionId *big.Int) ([]LoyaltyProgrammeCoupon, error) {
	return _Api.Contract.GetAllCoupons(&_Api.CallOpts, transactionId)
}

// GetBrandCoupons is a free data retrieval call binding the contract method 0xc99eea9b.
//
// Solidity: function getBrandCoupons(uint256 transactionId, address brandAddress) view returns((uint256,address,uint256,uint256,uint256,uint256,uint256,uint256,uint8,uint256,bool)[])
func (_Api *ApiCaller) GetBrandCoupons(opts *bind.CallOpts, transactionId *big.Int, brandAddress common.Address) ([]LoyaltyProgrammeCoupon, error) {
	var out []interface{}
	err := _Api.contract.Call(opts, &out, "getBrandCoupons", transactionId, brandAddress)

	if err != nil {
		return *new([]LoyaltyProgrammeCoupon), err
	}

	out0 := *abi.ConvertType(out[0], new([]LoyaltyProgrammeCoupon)).(*[]LoyaltyProgrammeCoupon)

	return out0, err

}

// GetBrandCoupons is a free data retrieval call binding the contract method 0xc99eea9b.
//
// Solidity: function getBrandCoupons(uint256 transactionId, address brandAddress) view returns((uint256,address,uint256,uint256,uint256,uint256,uint256,uint256,uint8,uint256,bool)[])
func (_Api *ApiSession) GetBrandCoupons(transactionId *big.Int, brandAddress common.Address) ([]LoyaltyProgrammeCoupon, error) {
	return _Api.Contract.GetBrandCoupons(&_Api.CallOpts, transactionId, brandAddress)
}

// GetBrandCoupons is a free data retrieval call binding the contract method 0xc99eea9b.
//
// Solidity: function getBrandCoupons(uint256 transactionId, address brandAddress) view returns((uint256,address,uint256,uint256,uint256,uint256,uint256,uint256,uint8,uint256,bool)[])
func (_Api *ApiCallerSession) GetBrandCoupons(transactionId *big.Int, brandAddress common.Address) ([]LoyaltyProgrammeCoupon, error) {
	return _Api.Contract.GetBrandCoupons(&_Api.CallOpts, transactionId, brandAddress)
}

// ConsumerCouponPayment is a paid mutator transaction binding the contract method 0xeab8b4e0.
//
// Solidity: function consumerCouponPayment(uint256 transactionId, uint256 holdingId, address businessAddress) returns()
func (_Api *ApiTransactor) ConsumerCouponPayment(opts *bind.TransactOpts, transactionId *big.Int, holdingId *big.Int, businessAddress common.Address) (*types.Transaction, error) {
	return _Api.contract.Transact(opts, "consumerCouponPayment", transactionId, holdingId, businessAddress)
}

// ConsumerCouponPayment is a paid mutator transaction binding the contract method 0xeab8b4e0.
//
// Solidity: function consumerCouponPayment(uint256 transactionId, uint256 holdingId, address businessAddress) returns()
func (_Api *ApiSession) ConsumerCouponPayment(transactionId *big.Int, holdingId *big.Int, businessAddress common.Address) (*types.Transaction, error) {
	return _Api.Contract.ConsumerCouponPayment(&_Api.TransactOpts, transactionId, holdingId, businessAddress)
}

// ConsumerCouponPayment is a paid mutator transaction binding the contract method 0xeab8b4e0.
//
// Solidity: function consumerCouponPayment(uint256 transactionId, uint256 holdingId, address businessAddress) returns()
func (_Api *ApiTransactorSession) ConsumerCouponPayment(transactionId *big.Int, holdingId *big.Int, businessAddress common.Address) (*types.Transaction, error) {
	return _Api.Contract.ConsumerCouponPayment(&_Api.TransactOpts, transactionId, holdingId, businessAddress)
}

// ConsumerTokenPayment is a paid mutator transaction binding the contract method 0xec6976af.
//
// Solidity: function consumerTokenPayment(uint256 transactionId, uint256 amount) returns()
func (_Api *ApiTransactor) ConsumerTokenPayment(opts *bind.TransactOpts, transactionId *big.Int, amount *big.Int) (*types.Transaction, error) {
	return _Api.contract.Transact(opts, "consumerTokenPayment", transactionId, amount)
}

// ConsumerTokenPayment is a paid mutator transaction binding the contract method 0xec6976af.
//
// Solidity: function consumerTokenPayment(uint256 transactionId, uint256 amount) returns()
func (_Api *ApiSession) ConsumerTokenPayment(transactionId *big.Int, amount *big.Int) (*types.Transaction, error) {
	return _Api.Contract.ConsumerTokenPayment(&_Api.TransactOpts, transactionId, amount)
}

// ConsumerTokenPayment is a paid mutator transaction binding the contract method 0xec6976af.
//
// Solidity: function consumerTokenPayment(uint256 transactionId, uint256 amount) returns()
func (_Api *ApiTransactorSession) ConsumerTokenPayment(transactionId *big.Int, amount *big.Int) (*types.Transaction, error) {
	return _Api.Contract.ConsumerTokenPayment(&_Api.TransactOpts, transactionId, amount)
}

// CreateCoupons is a paid mutator transaction binding the contract method 0xfd57536d.
//
// Solidity: function createCoupons(uint256 transactionId, address issuerBusiness, uint256 count, uint256 cost, uint256 discount, uint256 productCategory, uint256 thresholdValue, uint256 productId, uint8 couponType, uint256 expiryTime, uint256 creationCost) returns(uint256)
func (_Api *ApiTransactor) CreateCoupons(opts *bind.TransactOpts, transactionId *big.Int, issuerBusiness common.Address, count *big.Int, cost *big.Int, discount *big.Int, productCategory *big.Int, thresholdValue *big.Int, productId *big.Int, couponType uint8, expiryTime *big.Int, creationCost *big.Int) (*types.Transaction, error) {
	return _Api.contract.Transact(opts, "createCoupons", transactionId, issuerBusiness, count, cost, discount, productCategory, thresholdValue, productId, couponType, expiryTime, creationCost)
}

// CreateCoupons is a paid mutator transaction binding the contract method 0xfd57536d.
//
// Solidity: function createCoupons(uint256 transactionId, address issuerBusiness, uint256 count, uint256 cost, uint256 discount, uint256 productCategory, uint256 thresholdValue, uint256 productId, uint8 couponType, uint256 expiryTime, uint256 creationCost) returns(uint256)
func (_Api *ApiSession) CreateCoupons(transactionId *big.Int, issuerBusiness common.Address, count *big.Int, cost *big.Int, discount *big.Int, productCategory *big.Int, thresholdValue *big.Int, productId *big.Int, couponType uint8, expiryTime *big.Int, creationCost *big.Int) (*types.Transaction, error) {
	return _Api.Contract.CreateCoupons(&_Api.TransactOpts, transactionId, issuerBusiness, count, cost, discount, productCategory, thresholdValue, productId, couponType, expiryTime, creationCost)
}

// CreateCoupons is a paid mutator transaction binding the contract method 0xfd57536d.
//
// Solidity: function createCoupons(uint256 transactionId, address issuerBusiness, uint256 count, uint256 cost, uint256 discount, uint256 productCategory, uint256 thresholdValue, uint256 productId, uint8 couponType, uint256 expiryTime, uint256 creationCost) returns(uint256)
func (_Api *ApiTransactorSession) CreateCoupons(transactionId *big.Int, issuerBusiness common.Address, count *big.Int, cost *big.Int, discount *big.Int, productCategory *big.Int, thresholdValue *big.Int, productId *big.Int, couponType uint8, expiryTime *big.Int, creationCost *big.Int) (*types.Transaction, error) {
	return _Api.Contract.CreateCoupons(&_Api.TransactOpts, transactionId, issuerBusiness, count, cost, discount, productCategory, thresholdValue, productId, couponType, expiryTime, creationCost)
}

// DeactiveCoupon is a paid mutator transaction binding the contract method 0x0d2c7b5f.
//
// Solidity: function deactiveCoupon(uint256 transactionId, uint256 couponId) returns()
func (_Api *ApiTransactor) DeactiveCoupon(opts *bind.TransactOpts, transactionId *big.Int, couponId *big.Int) (*types.Transaction, error) {
	return _Api.contract.Transact(opts, "deactiveCoupon", transactionId, couponId)
}

// DeactiveCoupon is a paid mutator transaction binding the contract method 0x0d2c7b5f.
//
// Solidity: function deactiveCoupon(uint256 transactionId, uint256 couponId) returns()
func (_Api *ApiSession) DeactiveCoupon(transactionId *big.Int, couponId *big.Int) (*types.Transaction, error) {
	return _Api.Contract.DeactiveCoupon(&_Api.TransactOpts, transactionId, couponId)
}

// DeactiveCoupon is a paid mutator transaction binding the contract method 0x0d2c7b5f.
//
// Solidity: function deactiveCoupon(uint256 transactionId, uint256 couponId) returns()
func (_Api *ApiTransactorSession) DeactiveCoupon(transactionId *big.Int, couponId *big.Int) (*types.Transaction, error) {
	return _Api.Contract.DeactiveCoupon(&_Api.TransactOpts, transactionId, couponId)
}

// MintTokens is a paid mutator transaction binding the contract method 0x34a7c2e7.
//
// Solidity: function mintTokens(uint256 transactionId, uint256 amount) returns(uint256)
func (_Api *ApiTransactor) MintTokens(opts *bind.TransactOpts, transactionId *big.Int, amount *big.Int) (*types.Transaction, error) {
	return _Api.contract.Transact(opts, "mintTokens", transactionId, amount)
}

// MintTokens is a paid mutator transaction binding the contract method 0x34a7c2e7.
//
// Solidity: function mintTokens(uint256 transactionId, uint256 amount) returns(uint256)
func (_Api *ApiSession) MintTokens(transactionId *big.Int, amount *big.Int) (*types.Transaction, error) {
	return _Api.Contract.MintTokens(&_Api.TransactOpts, transactionId, amount)
}

// MintTokens is a paid mutator transaction binding the contract method 0x34a7c2e7.
//
// Solidity: function mintTokens(uint256 transactionId, uint256 amount) returns(uint256)
func (_Api *ApiTransactorSession) MintTokens(transactionId *big.Int, amount *big.Int) (*types.Transaction, error) {
	return _Api.Contract.MintTokens(&_Api.TransactOpts, transactionId, amount)
}

// Pay is a paid mutator transaction binding the contract method 0x0313766f.
//
// Solidity: function pay(uint256 transactionId, address account, uint256 amount) returns()
func (_Api *ApiTransactor) Pay(opts *bind.TransactOpts, transactionId *big.Int, account common.Address, amount *big.Int) (*types.Transaction, error) {
	return _Api.contract.Transact(opts, "pay", transactionId, account, amount)
}

// Pay is a paid mutator transaction binding the contract method 0x0313766f.
//
// Solidity: function pay(uint256 transactionId, address account, uint256 amount) returns()
func (_Api *ApiSession) Pay(transactionId *big.Int, account common.Address, amount *big.Int) (*types.Transaction, error) {
	return _Api.Contract.Pay(&_Api.TransactOpts, transactionId, account, amount)
}

// Pay is a paid mutator transaction binding the contract method 0x0313766f.
//
// Solidity: function pay(uint256 transactionId, address account, uint256 amount) returns()
func (_Api *ApiTransactorSession) Pay(transactionId *big.Int, account common.Address, amount *big.Int) (*types.Transaction, error) {
	return _Api.Contract.Pay(&_Api.TransactOpts, transactionId, account, amount)
}

// PurchaseCoupon is a paid mutator transaction binding the contract method 0xea747b8c.
//
// Solidity: function purchaseCoupon(uint256 transactionId, address businessAddress, uint256 couponId, uint256 count) returns()
func (_Api *ApiTransactor) PurchaseCoupon(opts *bind.TransactOpts, transactionId *big.Int, businessAddress common.Address, couponId *big.Int, count *big.Int) (*types.Transaction, error) {
	return _Api.contract.Transact(opts, "purchaseCoupon", transactionId, businessAddress, couponId, count)
}

// PurchaseCoupon is a paid mutator transaction binding the contract method 0xea747b8c.
//
// Solidity: function purchaseCoupon(uint256 transactionId, address businessAddress, uint256 couponId, uint256 count) returns()
func (_Api *ApiSession) PurchaseCoupon(transactionId *big.Int, businessAddress common.Address, couponId *big.Int, count *big.Int) (*types.Transaction, error) {
	return _Api.Contract.PurchaseCoupon(&_Api.TransactOpts, transactionId, businessAddress, couponId, count)
}

// PurchaseCoupon is a paid mutator transaction binding the contract method 0xea747b8c.
//
// Solidity: function purchaseCoupon(uint256 transactionId, address businessAddress, uint256 couponId, uint256 count) returns()
func (_Api *ApiTransactorSession) PurchaseCoupon(transactionId *big.Int, businessAddress common.Address, couponId *big.Int, count *big.Int) (*types.Transaction, error) {
	return _Api.Contract.PurchaseCoupon(&_Api.TransactOpts, transactionId, businessAddress, couponId, count)
}

// RedeemTokens is a paid mutator transaction binding the contract method 0xa6e158f8.
//
// Solidity: function redeemTokens(uint256 amount) returns()
func (_Api *ApiTransactor) RedeemTokens(opts *bind.TransactOpts, amount *big.Int) (*types.Transaction, error) {
	return _Api.contract.Transact(opts, "redeemTokens", amount)
}

// RedeemTokens is a paid mutator transaction binding the contract method 0xa6e158f8.
//
// Solidity: function redeemTokens(uint256 amount) returns()
func (_Api *ApiSession) RedeemTokens(amount *big.Int) (*types.Transaction, error) {
	return _Api.Contract.RedeemTokens(&_Api.TransactOpts, amount)
}

// RedeemTokens is a paid mutator transaction binding the contract method 0xa6e158f8.
//
// Solidity: function redeemTokens(uint256 amount) returns()
func (_Api *ApiTransactorSession) RedeemTokens(amount *big.Int) (*types.Transaction, error) {
	return _Api.Contract.RedeemTokens(&_Api.TransactOpts, amount)
}

// RegisterMember is a paid mutator transaction binding the contract method 0x203d6441.
//
// Solidity: function registerMember(uint256 transactionId, address memberAddress, uint8 accountType) returns()
func (_Api *ApiTransactor) RegisterMember(opts *bind.TransactOpts, transactionId *big.Int, memberAddress common.Address, accountType uint8) (*types.Transaction, error) {
	return _Api.contract.Transact(opts, "registerMember", transactionId, memberAddress, accountType)
}

// RegisterMember is a paid mutator transaction binding the contract method 0x203d6441.
//
// Solidity: function registerMember(uint256 transactionId, address memberAddress, uint8 accountType) returns()
func (_Api *ApiSession) RegisterMember(transactionId *big.Int, memberAddress common.Address, accountType uint8) (*types.Transaction, error) {
	return _Api.Contract.RegisterMember(&_Api.TransactOpts, transactionId, memberAddress, accountType)
}

// RegisterMember is a paid mutator transaction binding the contract method 0x203d6441.
//
// Solidity: function registerMember(uint256 transactionId, address memberAddress, uint8 accountType) returns()
func (_Api *ApiTransactorSession) RegisterMember(transactionId *big.Int, memberAddress common.Address, accountType uint8) (*types.Transaction, error) {
	return _Api.Contract.RegisterMember(&_Api.TransactOpts, transactionId, memberAddress, accountType)
}

// ApiCouponCreatedIterator is returned from FilterCouponCreated and is used to iterate over the raw logs and unpacked data for CouponCreated events raised by the Api contract.
type ApiCouponCreatedIterator struct {
	Event *ApiCouponCreated // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ApiCouponCreatedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ApiCouponCreated)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ApiCouponCreated)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ApiCouponCreatedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ApiCouponCreatedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ApiCouponCreated represents a CouponCreated event raised by the Api contract.
type ApiCouponCreated struct {
	TransactionId *big.Int
	CouponId      *big.Int
	Raw           types.Log // Blockchain specific contextual infos
}

// FilterCouponCreated is a free log retrieval operation binding the contract event 0xa642f6125031e33b459faac09c60d43622ebedeb338901054283d9bb430deb12.
//
// Solidity: event CouponCreated(uint256 transactionId, uint256 couponId)
func (_Api *ApiFilterer) FilterCouponCreated(opts *bind.FilterOpts) (*ApiCouponCreatedIterator, error) {

	logs, sub, err := _Api.contract.FilterLogs(opts, "CouponCreated")
	if err != nil {
		return nil, err
	}
	return &ApiCouponCreatedIterator{contract: _Api.contract, event: "CouponCreated", logs: logs, sub: sub}, nil
}

// WatchCouponCreated is a free log subscription operation binding the contract event 0xa642f6125031e33b459faac09c60d43622ebedeb338901054283d9bb430deb12.
//
// Solidity: event CouponCreated(uint256 transactionId, uint256 couponId)
func (_Api *ApiFilterer) WatchCouponCreated(opts *bind.WatchOpts, sink chan<- *ApiCouponCreated) (event.Subscription, error) {

	logs, sub, err := _Api.contract.WatchLogs(opts, "CouponCreated")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ApiCouponCreated)
				if err := _Api.contract.UnpackLog(event, "CouponCreated", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseCouponCreated is a log parse operation binding the contract event 0xa642f6125031e33b459faac09c60d43622ebedeb338901054283d9bb430deb12.
//
// Solidity: event CouponCreated(uint256 transactionId, uint256 couponId)
func (_Api *ApiFilterer) ParseCouponCreated(log types.Log) (*ApiCouponCreated, error) {
	event := new(ApiCouponCreated)
	if err := _Api.contract.UnpackLog(event, "CouponCreated", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ApiCouponHoldingTransactionCompleteIterator is returned from FilterCouponHoldingTransactionComplete and is used to iterate over the raw logs and unpacked data for CouponHoldingTransactionComplete events raised by the Api contract.
type ApiCouponHoldingTransactionCompleteIterator struct {
	Event *ApiCouponHoldingTransactionComplete // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ApiCouponHoldingTransactionCompleteIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ApiCouponHoldingTransactionComplete)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ApiCouponHoldingTransactionComplete)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ApiCouponHoldingTransactionCompleteIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ApiCouponHoldingTransactionCompleteIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ApiCouponHoldingTransactionComplete represents a CouponHoldingTransactionComplete event raised by the Api contract.
type ApiCouponHoldingTransactionComplete struct {
	TransactionId    *big.Int
	ConsumerSender   common.Address
	BusinessReceiver common.Address
	HoldingId        *big.Int
	Raw              types.Log // Blockchain specific contextual infos
}

// FilterCouponHoldingTransactionComplete is a free log retrieval operation binding the contract event 0x48d1eb8434432b178452473c313c00292893f57718970b914ebe9472b6e3f571.
//
// Solidity: event CouponHoldingTransactionComplete(uint256 transactionId, address consumerSender, address businessReceiver, uint256 holdingId)
func (_Api *ApiFilterer) FilterCouponHoldingTransactionComplete(opts *bind.FilterOpts) (*ApiCouponHoldingTransactionCompleteIterator, error) {

	logs, sub, err := _Api.contract.FilterLogs(opts, "CouponHoldingTransactionComplete")
	if err != nil {
		return nil, err
	}
	return &ApiCouponHoldingTransactionCompleteIterator{contract: _Api.contract, event: "CouponHoldingTransactionComplete", logs: logs, sub: sub}, nil
}

// WatchCouponHoldingTransactionComplete is a free log subscription operation binding the contract event 0x48d1eb8434432b178452473c313c00292893f57718970b914ebe9472b6e3f571.
//
// Solidity: event CouponHoldingTransactionComplete(uint256 transactionId, address consumerSender, address businessReceiver, uint256 holdingId)
func (_Api *ApiFilterer) WatchCouponHoldingTransactionComplete(opts *bind.WatchOpts, sink chan<- *ApiCouponHoldingTransactionComplete) (event.Subscription, error) {

	logs, sub, err := _Api.contract.WatchLogs(opts, "CouponHoldingTransactionComplete")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ApiCouponHoldingTransactionComplete)
				if err := _Api.contract.UnpackLog(event, "CouponHoldingTransactionComplete", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseCouponHoldingTransactionComplete is a log parse operation binding the contract event 0x48d1eb8434432b178452473c313c00292893f57718970b914ebe9472b6e3f571.
//
// Solidity: event CouponHoldingTransactionComplete(uint256 transactionId, address consumerSender, address businessReceiver, uint256 holdingId)
func (_Api *ApiFilterer) ParseCouponHoldingTransactionComplete(log types.Log) (*ApiCouponHoldingTransactionComplete, error) {
	event := new(ApiCouponHoldingTransactionComplete)
	if err := _Api.contract.UnpackLog(event, "CouponHoldingTransactionComplete", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ApiCouponTransactionCompleteIterator is returned from FilterCouponTransactionComplete and is used to iterate over the raw logs and unpacked data for CouponTransactionComplete events raised by the Api contract.
type ApiCouponTransactionCompleteIterator struct {
	Event *ApiCouponTransactionComplete // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ApiCouponTransactionCompleteIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ApiCouponTransactionComplete)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ApiCouponTransactionComplete)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ApiCouponTransactionCompleteIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ApiCouponTransactionCompleteIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ApiCouponTransactionComplete represents a CouponTransactionComplete event raised by the Api contract.
type ApiCouponTransactionComplete struct {
	TransactionId    *big.Int
	BusinessSender   common.Address
	ConsumerReceiver common.Address
	CouponId         *big.Int
	Count            *big.Int
	Raw              types.Log // Blockchain specific contextual infos
}

// FilterCouponTransactionComplete is a free log retrieval operation binding the contract event 0xc19f12d44b95c1a221ab57e69ec538ff5181f820f28f967108426da285ab9a6b.
//
// Solidity: event CouponTransactionComplete(uint256 transactionId, address businessSender, address consumerReceiver, uint256 couponId, uint256 count)
func (_Api *ApiFilterer) FilterCouponTransactionComplete(opts *bind.FilterOpts) (*ApiCouponTransactionCompleteIterator, error) {

	logs, sub, err := _Api.contract.FilterLogs(opts, "CouponTransactionComplete")
	if err != nil {
		return nil, err
	}
	return &ApiCouponTransactionCompleteIterator{contract: _Api.contract, event: "CouponTransactionComplete", logs: logs, sub: sub}, nil
}

// WatchCouponTransactionComplete is a free log subscription operation binding the contract event 0xc19f12d44b95c1a221ab57e69ec538ff5181f820f28f967108426da285ab9a6b.
//
// Solidity: event CouponTransactionComplete(uint256 transactionId, address businessSender, address consumerReceiver, uint256 couponId, uint256 count)
func (_Api *ApiFilterer) WatchCouponTransactionComplete(opts *bind.WatchOpts, sink chan<- *ApiCouponTransactionComplete) (event.Subscription, error) {

	logs, sub, err := _Api.contract.WatchLogs(opts, "CouponTransactionComplete")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ApiCouponTransactionComplete)
				if err := _Api.contract.UnpackLog(event, "CouponTransactionComplete", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseCouponTransactionComplete is a log parse operation binding the contract event 0xc19f12d44b95c1a221ab57e69ec538ff5181f820f28f967108426da285ab9a6b.
//
// Solidity: event CouponTransactionComplete(uint256 transactionId, address businessSender, address consumerReceiver, uint256 couponId, uint256 count)
func (_Api *ApiFilterer) ParseCouponTransactionComplete(log types.Log) (*ApiCouponTransactionComplete, error) {
	event := new(ApiCouponTransactionComplete)
	if err := _Api.contract.UnpackLog(event, "CouponTransactionComplete", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ApiMemberRegisteredIterator is returned from FilterMemberRegistered and is used to iterate over the raw logs and unpacked data for MemberRegistered events raised by the Api contract.
type ApiMemberRegisteredIterator struct {
	Event *ApiMemberRegistered // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ApiMemberRegisteredIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ApiMemberRegistered)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ApiMemberRegistered)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ApiMemberRegisteredIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ApiMemberRegisteredIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ApiMemberRegistered represents a MemberRegistered event raised by the Api contract.
type ApiMemberRegistered struct {
	TransactionId *big.Int
	MemberAddress common.Address
	Authority     uint8
	Raw           types.Log // Blockchain specific contextual infos
}

// FilterMemberRegistered is a free log retrieval operation binding the contract event 0xcf5372d965b8a6c9a60a3fff29e749a3373cdb5251da091443f0660a0f602db4.
//
// Solidity: event MemberRegistered(uint256 transactionId, address memberAddress, uint8 authority)
func (_Api *ApiFilterer) FilterMemberRegistered(opts *bind.FilterOpts) (*ApiMemberRegisteredIterator, error) {

	logs, sub, err := _Api.contract.FilterLogs(opts, "MemberRegistered")
	if err != nil {
		return nil, err
	}
	return &ApiMemberRegisteredIterator{contract: _Api.contract, event: "MemberRegistered", logs: logs, sub: sub}, nil
}

// WatchMemberRegistered is a free log subscription operation binding the contract event 0xcf5372d965b8a6c9a60a3fff29e749a3373cdb5251da091443f0660a0f602db4.
//
// Solidity: event MemberRegistered(uint256 transactionId, address memberAddress, uint8 authority)
func (_Api *ApiFilterer) WatchMemberRegistered(opts *bind.WatchOpts, sink chan<- *ApiMemberRegistered) (event.Subscription, error) {

	logs, sub, err := _Api.contract.WatchLogs(opts, "MemberRegistered")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ApiMemberRegistered)
				if err := _Api.contract.UnpackLog(event, "MemberRegistered", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseMemberRegistered is a log parse operation binding the contract event 0xcf5372d965b8a6c9a60a3fff29e749a3373cdb5251da091443f0660a0f602db4.
//
// Solidity: event MemberRegistered(uint256 transactionId, address memberAddress, uint8 authority)
func (_Api *ApiFilterer) ParseMemberRegistered(log types.Log) (*ApiMemberRegistered, error) {
	event := new(ApiMemberRegistered)
	if err := _Api.contract.UnpackLog(event, "MemberRegistered", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ApiSuperCoinTransactionCompleteIterator is returned from FilterSuperCoinTransactionComplete and is used to iterate over the raw logs and unpacked data for SuperCoinTransactionComplete events raised by the Api contract.
type ApiSuperCoinTransactionCompleteIterator struct {
	Event *ApiSuperCoinTransactionComplete // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ApiSuperCoinTransactionCompleteIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ApiSuperCoinTransactionComplete)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ApiSuperCoinTransactionComplete)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ApiSuperCoinTransactionCompleteIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ApiSuperCoinTransactionCompleteIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ApiSuperCoinTransactionComplete represents a SuperCoinTransactionComplete event raised by the Api contract.
type ApiSuperCoinTransactionComplete struct {
	TransactionId *big.Int
	Sender        common.Address
	Receiver      common.Address
	Amount        *big.Int
	Raw           types.Log // Blockchain specific contextual infos
}

// FilterSuperCoinTransactionComplete is a free log retrieval operation binding the contract event 0x2e578e436685c8ee906431b002661f41d45a790b565ca7b6f06ae35bfae01a76.
//
// Solidity: event SuperCoinTransactionComplete(uint256 transactionId, address sender, address receiver, uint256 amount)
func (_Api *ApiFilterer) FilterSuperCoinTransactionComplete(opts *bind.FilterOpts) (*ApiSuperCoinTransactionCompleteIterator, error) {

	logs, sub, err := _Api.contract.FilterLogs(opts, "SuperCoinTransactionComplete")
	if err != nil {
		return nil, err
	}
	return &ApiSuperCoinTransactionCompleteIterator{contract: _Api.contract, event: "SuperCoinTransactionComplete", logs: logs, sub: sub}, nil
}

// WatchSuperCoinTransactionComplete is a free log subscription operation binding the contract event 0x2e578e436685c8ee906431b002661f41d45a790b565ca7b6f06ae35bfae01a76.
//
// Solidity: event SuperCoinTransactionComplete(uint256 transactionId, address sender, address receiver, uint256 amount)
func (_Api *ApiFilterer) WatchSuperCoinTransactionComplete(opts *bind.WatchOpts, sink chan<- *ApiSuperCoinTransactionComplete) (event.Subscription, error) {

	logs, sub, err := _Api.contract.WatchLogs(opts, "SuperCoinTransactionComplete")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ApiSuperCoinTransactionComplete)
				if err := _Api.contract.UnpackLog(event, "SuperCoinTransactionComplete", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseSuperCoinTransactionComplete is a log parse operation binding the contract event 0x2e578e436685c8ee906431b002661f41d45a790b565ca7b6f06ae35bfae01a76.
//
// Solidity: event SuperCoinTransactionComplete(uint256 transactionId, address sender, address receiver, uint256 amount)
func (_Api *ApiFilterer) ParseSuperCoinTransactionComplete(log types.Log) (*ApiSuperCoinTransactionComplete, error) {
	event := new(ApiSuperCoinTransactionComplete)
	if err := _Api.contract.UnpackLog(event, "SuperCoinTransactionComplete", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}
