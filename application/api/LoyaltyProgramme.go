// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package api

import (
	"errors"
	"math/big"
	"strings"

	ethereum "github.com/ethereum/go-ethereum"
	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/ethereum/go-ethereum/event"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = errors.New
	_ = big.NewInt
	_ = strings.NewReader
	_ = ethereum.NotFound
	_ = bind.Bind
	_ = common.Big1
	_ = types.BloomLookup
	_ = event.NewSubscription
	_ = abi.ConvertType
)

// ApiMetaData contains all meta data concerning the Api contract.
var ApiMetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"transactionId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"holdingId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"couponId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expiryDate\",\"type\":\"uint256\"}],\"name\":\"CouponHoldingExpired\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"transactionId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"couponId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"requested\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"available\",\"type\":\"uint256\"}],\"name\":\"InSufficientCoupons\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"transactionId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"requested\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"available\",\"type\":\"uint256\"}],\"name\":\"InSufficientFunds\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"transactionId\",\"type\":\"uint256\"},{\"internalType\":\"enumLoyaltyProgramme.AccountType\",\"name\":\"validAuthority\",\"type\":\"uint8\"},{\"internalType\":\"enumLoyaltyProgramme.AccountType\",\"name\":\"senderAuthority\",\"type\":\"uint8\"}],\"name\":\"InValidAuthority\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"transactionId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"couponId\",\"type\":\"uint256\"}],\"name\":\"InValidCoupon\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"transactionId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"holdingId\",\"type\":\"uint256\"}],\"name\":\"InValidCouponHolding\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"transactionId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"couponId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"expectedBusiness\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"receivedBusiness\",\"type\":\"address\"}],\"name\":\"InValidCouponHoldingApplication\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"transactionId\",\"type\":\"uint256\"},{\"internalType\":\"enumLoyaltyProgramme.AccountType\",\"name\":\"recieverAuthority\",\"type\":\"uint8\"}],\"name\":\"InValidRecipient\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"transactionId\",\"type\":\"uint256\"},{\"internalType\":\"enumLoyaltyProgramme.AccountType\",\"name\":\"existingAuthority\",\"type\":\"uint8\"}],\"name\":\"InValidRegistration\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"transactionId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"message\",\"type\":\"string\"}],\"name\":\"IntegrityConstraintFailed\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"transactionId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"requestor\",\"type\":\"address\"}],\"name\":\"UnAuthorized\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"transactionId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"person\",\"type\":\"address\"}],\"name\":\"UnRegisteredAccount\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"transactionId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"enumLoyaltyProgramme.AccountType\",\"name\":\"validAuthority\",\"type\":\"uint8\"},{\"internalType\":\"enumLoyaltyProgramme.AccountType\",\"name\":\"senderAuthority\",\"type\":\"uint8\"}],\"name\":\"UnexpectedAccount\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"transactionId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"couponId\",\"type\":\"uint256\"}],\"name\":\"CouponCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"transactionId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"consumerSender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"businessReceiver\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"holdingId\",\"type\":\"uint256\"}],\"name\":\"CouponHoldingTransactionComplete\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"transactionId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"businessSender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"consumerReceiver\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"couponId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"count\",\"type\":\"uint256\"}],\"name\":\"CouponTransactionComplete\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"transactionId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"memberAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"enumLoyaltyProgramme.AccountType\",\"name\":\"authority\",\"type\":\"uint8\"}],\"name\":\"MemberRegistered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"transactionId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"SuperCoinTransactionComplete\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"couponList\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"couponId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"issuerBusiness\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"superCoins\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"count\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"discount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"productCategory\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"thresholdValue\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"productId\",\"type\":\"uint256\"},{\"internalType\":\"enumLoyaltyProgramme.CouponType\",\"name\":\"couponType\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"expiryTime\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"active\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\",\"constant\":true},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"transactionId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"consumerTokenPayment\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"transactionId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"holdingId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"businessAddress\",\"type\":\"address\"}],\"name\":\"consumerCouponPayment\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"transactionId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"businessAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"couponId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"count\",\"type\":\"uint256\"}],\"name\":\"purchaseCoupon\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"redeemTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"transactionId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"couponId\",\"type\":\"uint256\"}],\"name\":\"deactiveCoupon\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"transactionId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"issuerBusiness\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"count\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"cost\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"discount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"productCategory\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"thresholdValue\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"productId\",\"type\":\"uint256\"},{\"internalType\":\"enumLoyaltyProgramme.CouponType\",\"name\":\"couponType\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"expiryTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"creationCost\",\"type\":\"uint256\"}],\"name\":\"createCoupons\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"transactionId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"memberAddress\",\"type\":\"address\"},{\"internalType\":\"enumLoyaltyProgramme.AccountType\",\"name\":\"accountType\",\"type\":\"uint8\"}],\"name\":\"registerMember\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"transactionId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"pay\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"transactionId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"mintTokens\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"transactionId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"person\",\"type\":\"address\"}],\"name\":\"getAccountBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\",\"constant\":true}]",
	Bin: "",
}

// ApiABI is the input ABI used to generate the binding from.
// Deprecated: Use ApiMetaData.ABI instead.
var ApiABI = ApiMetaData.ABI

// ApiBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use ApiMetaData.Bin instead.
var ApiBin = ApiMetaData.Bin

// DeployApi deploys a new Ethereum contract, binding an instance of Api to it.
func DeployApi(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *Api, error) {
	parsed, err := ApiMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(ApiBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &Api{ApiCaller: ApiCaller{contract: contract}, ApiTransactor: ApiTransactor{contract: contract}, ApiFilterer: ApiFilterer{contract: contract}}, nil
}

// Api is an auto generated Go binding around an Ethereum contract.
type Api struct {
	ApiCaller     // Read-only binding to the contract
	ApiTransactor // Write-only binding to the contract
	ApiFilterer   // Log filterer for contract events
}

// ApiCaller is an auto generated read-only Go binding around an Ethereum contract.
type ApiCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ApiTransactor is an auto generated write-only Go binding around an Ethereum contract.
type ApiTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ApiFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type ApiFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ApiSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type ApiSession struct {
	Contract     *Api              // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// ApiCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type ApiCallerSession struct {
	Contract *ApiCaller    // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts // Call options to use throughout this session
}

// ApiTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type ApiTransactorSession struct {
	Contract     *ApiTransactor    // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// ApiRaw is an auto generated low-level Go binding around an Ethereum contract.
type ApiRaw struct {
	Contract *Api // Generic contract binding to access the raw methods on
}

// ApiCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type ApiCallerRaw struct {
	Contract *ApiCaller // Generic read-only contract binding to access the raw methods on
}

// ApiTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type ApiTransactorRaw struct {
	Contract *ApiTransactor // Generic write-only contract binding to access the raw methods on
}

// NewApi creates a new instance of Api, bound to a specific deployed contract.
func NewApi(address common.Address, backend bind.ContractBackend) (*Api, error) {
	contract, err := bindApi(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &Api{ApiCaller: ApiCaller{contract: contract}, ApiTransactor: ApiTransactor{contract: contract}, ApiFilterer: ApiFilterer{contract: contract}}, nil
}

// NewApiCaller creates a new read-only instance of Api, bound to a specific deployed contract.
func NewApiCaller(address common.Address, caller bind.ContractCaller) (*ApiCaller, error) {
	contract, err := bindApi(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &ApiCaller{contract: contract}, nil
}

// NewApiTransactor creates a new write-only instance of Api, bound to a specific deployed contract.
func NewApiTransactor(address common.Address, transactor bind.ContractTransactor) (*ApiTransactor, error) {
	contract, err := bindApi(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &ApiTransactor{contract: contract}, nil
}

// NewApiFilterer creates a new log filterer instance of Api, bound to a specific deployed contract.
func NewApiFilterer(address common.Address, filterer bind.ContractFilterer) (*ApiFilterer, error) {
	contract, err := bindApi(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &ApiFilterer{contract: contract}, nil
}

// bindApi binds a generic wrapper to an already deployed contract.
func bindApi(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := ApiMetaData.GetAbi()
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, *parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Api *ApiRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _Api.Contract.ApiCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Api *ApiRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Api.Contract.ApiTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Api *ApiRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Api.Contract.ApiTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Api *ApiCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _Api.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Api *ApiTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Api.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Api *ApiTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Api.Contract.contract.Transact(opts, method, params...)
}

// CouponList is a free data retrieval call binding the contract method 0xd03c534c.
//
// Solidity: function couponList(uint256 ) view returns(uint256 couponId, address issuerBusiness, uint256 superCoins, uint256 count, uint256 discount, uint256 productCategory, uint256 thresholdValue, uint256 productId, uint8 couponType, uint256 expiryTime, bool active)
func (_Api *ApiCaller) CouponList(opts *bind.CallOpts, arg0 *big.Int) (struct {
	CouponId        *big.Int
	IssuerBusiness  common.Address
	SuperCoins      *big.Int
	Count           *big.Int
	Discount        *big.Int
	ProductCategory *big.Int
	ThresholdValue  *big.Int
	ProductId       *big.Int
	CouponType      uint8
	ExpiryTime      *big.Int
	Active          bool
}, error) {
	var out []interface{}
	err := _Api.contract.Call(opts, &out, "couponList", arg0)

	outstruct := new(struct {
		CouponId        *big.Int
		IssuerBusiness  common.Address
		SuperCoins      *big.Int
		Count           *big.Int
		Discount        *big.Int
		ProductCategory *big.Int
		ThresholdValue  *big.Int
		ProductId       *big.Int
		CouponType      uint8
		ExpiryTime      *big.Int
		Active          bool
	})
	if err != nil {
		return *outstruct, err
	}

	outstruct.CouponId = *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)
	outstruct.IssuerBusiness = *abi.ConvertType(out[1], new(common.Address)).(*common.Address)
	outstruct.SuperCoins = *abi.ConvertType(out[2], new(*big.Int)).(**big.Int)
	outstruct.Count = *abi.ConvertType(out[3], new(*big.Int)).(**big.Int)
	outstruct.Discount = *abi.ConvertType(out[4], new(*big.Int)).(**big.Int)
	outstruct.ProductCategory = *abi.ConvertType(out[5], new(*big.Int)).(**big.Int)
	outstruct.ThresholdValue = *abi.ConvertType(out[6], new(*big.Int)).(**big.Int)
	outstruct.ProductId = *abi.ConvertType(out[7], new(*big.Int)).(**big.Int)
	outstruct.CouponType = *abi.ConvertType(out[8], new(uint8)).(*uint8)
	outstruct.ExpiryTime = *abi.ConvertType(out[9], new(*big.Int)).(**big.Int)
	outstruct.Active = *abi.ConvertType(out[10], new(bool)).(*bool)

	return *outstruct, err

}

// CouponList is a free data retrieval call binding the contract method 0xd03c534c.
//
// Solidity: function couponList(uint256 ) view returns(uint256 couponId, address issuerBusiness, uint256 superCoins, uint256 count, uint256 discount, uint256 productCategory, uint256 thresholdValue, uint256 productId, uint8 couponType, uint256 expiryTime, bool active)
func (_Api *ApiSession) CouponList(arg0 *big.Int) (struct {
	CouponId        *big.Int
	IssuerBusiness  common.Address
	SuperCoins      *big.Int
	Count           *big.Int
	Discount        *big.Int
	ProductCategory *big.Int
	ThresholdValue  *big.Int
	ProductId       *big.Int
	CouponType      uint8
	ExpiryTime      *big.Int
	Active          bool
}, error) {
	return _Api.Contract.CouponList(&_Api.CallOpts, arg0)
}

// CouponList is a free data retrieval call binding the contract method 0xd03c534c.
//
// Solidity: function couponList(uint256 ) view returns(uint256 couponId, address issuerBusiness, uint256 superCoins, uint256 count, uint256 discount, uint256 productCategory, uint256 thresholdValue, uint256 productId, uint8 couponType, uint256 expiryTime, bool active)
func (_Api *ApiCallerSession) CouponList(arg0 *big.Int) (struct {
	CouponId        *big.Int
	IssuerBusiness  common.Address
	SuperCoins      *big.Int
	Count           *big.Int
	Discount        *big.Int
	ProductCategory *big.Int
	ThresholdValue  *big.Int
	ProductId       *big.Int
	CouponType      uint8
	ExpiryTime      *big.Int
	Active          bool
}, error) {
	return _Api.Contract.CouponList(&_Api.CallOpts, arg0)
}

// GetAccountBalance is a free data retrieval call binding the contract method 0x5e81300a.
//
// Solidity: function getAccountBalance(uint256 transactionId, address person) view returns(uint256)
func (_Api *ApiCaller) GetAccountBalance(opts *bind.CallOpts, transactionId *big.Int, person common.Address) (*big.Int, error) {
	var out []interface{}
	err := _Api.contract.Call(opts, &out, "getAccountBalance", transactionId, person)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetAccountBalance is a free data retrieval call binding the contract method 0x5e81300a.
//
// Solidity: function getAccountBalance(uint256 transactionId, address person) view returns(uint256)
func (_Api *ApiSession) GetAccountBalance(transactionId *big.Int, person common.Address) (*big.Int, error) {
	return _Api.Contract.GetAccountBalance(&_Api.CallOpts, transactionId, person)
}

// GetAccountBalance is a free data retrieval call binding the contract method 0x5e81300a.
//
// Solidity: function getAccountBalance(uint256 transactionId, address person) view returns(uint256)
func (_Api *ApiCallerSession) GetAccountBalance(transactionId *big.Int, person common.Address) (*big.Int, error) {
	return _Api.Contract.GetAccountBalance(&_Api.CallOpts, transactionId, person)
}

// ConsumerCouponPayment is a paid mutator transaction binding the contract method 0xeab8b4e0.
//
// Solidity: function consumerCouponPayment(uint256 transactionId, uint256 holdingId, address businessAddress) returns()
func (_Api *ApiTransactor) ConsumerCouponPayment(opts *bind.TransactOpts, transactionId *big.Int, holdingId *big.Int, businessAddress common.Address) (*types.Transaction, error) {
	return _Api.contract.Transact(opts, "consumerCouponPayment", transactionId, holdingId, businessAddress)
}

// ConsumerCouponPayment is a paid mutator transaction binding the contract method 0xeab8b4e0.
//
// Solidity: function consumerCouponPayment(uint256 transactionId, uint256 holdingId, address businessAddress) returns()
func (_Api *ApiSession) ConsumerCouponPayment(transactionId *big.Int, holdingId *big.Int, businessAddress common.Address) (*types.Transaction, error) {
	return _Api.Contract.ConsumerCouponPayment(&_Api.TransactOpts, transactionId, holdingId, businessAddress)
}

// ConsumerCouponPayment is a paid mutator transaction binding the contract method 0xeab8b4e0.
//
// Solidity: function consumerCouponPayment(uint256 transactionId, uint256 holdingId, address businessAddress) returns()
func (_Api *ApiTransactorSession) ConsumerCouponPayment(transactionId *big.Int, holdingId *big.Int, businessAddress common.Address) (*types.Transaction, error) {
	return _Api.Contract.ConsumerCouponPayment(&_Api.TransactOpts, transactionId, holdingId, businessAddress)
}

// ConsumerTokenPayment is a paid mutator transaction binding the contract method 0xec6976af.
//
// Solidity: function consumerTokenPayment(uint256 transactionId, uint256 amount) returns()
func (_Api *ApiTransactor) ConsumerTokenPayment(opts *bind.TransactOpts, transactionId *big.Int, amount *big.Int) (*types.Transaction, error) {
	return _Api.contract.Transact(opts, "consumerTokenPayment", transactionId, amount)
}

// ConsumerTokenPayment is a paid mutator transaction binding the contract method 0xec6976af.
//
// Solidity: function consumerTokenPayment(uint256 transactionId, uint256 amount) returns()
func (_Api *ApiSession) ConsumerTokenPayment(transactionId *big.Int, amount *big.Int) (*types.Transaction, error) {
	return _Api.Contract.ConsumerTokenPayment(&_Api.TransactOpts, transactionId, amount)
}

// ConsumerTokenPayment is a paid mutator transaction binding the contract method 0xec6976af.
//
// Solidity: function consumerTokenPayment(uint256 transactionId, uint256 amount) returns()
func (_Api *ApiTransactorSession) ConsumerTokenPayment(transactionId *big.Int, amount *big.Int) (*types.Transaction, error) {
	return _Api.Contract.ConsumerTokenPayment(&_Api.TransactOpts, transactionId, amount)
}

// CreateCoupons is a paid mutator transaction binding the contract method 0xfd57536d.
//
// Solidity: function createCoupons(uint256 transactionId, address issuerBusiness, uint256 count, uint256 cost, uint256 discount, uint256 productCategory, uint256 thresholdValue, uint256 productId, uint8 couponType, uint256 expiryTime, uint256 creationCost) returns(uint256)
func (_Api *ApiTransactor) CreateCoupons(opts *bind.TransactOpts, transactionId *big.Int, issuerBusiness common.Address, count *big.Int, cost *big.Int, discount *big.Int, productCategory *big.Int, thresholdValue *big.Int, productId *big.Int, couponType uint8, expiryTime *big.Int, creationCost *big.Int) (*types.Transaction, error) {
	return _Api.contract.Transact(opts, "createCoupons", transactionId, issuerBusiness, count, cost, discount, productCategory, thresholdValue, productId, couponType, expiryTime, creationCost)
}

// CreateCoupons is a paid mutator transaction binding the contract method 0xfd57536d.
//
// Solidity: function createCoupons(uint256 transactionId, address issuerBusiness, uint256 count, uint256 cost, uint256 discount, uint256 productCategory, uint256 thresholdValue, uint256 productId, uint8 couponType, uint256 expiryTime, uint256 creationCost) returns(uint256)
func (_Api *ApiSession) CreateCoupons(transactionId *big.Int, issuerBusiness common.Address, count *big.Int, cost *big.Int, discount *big.Int, productCategory *big.Int, thresholdValue *big.Int, productId *big.Int, couponType uint8, expiryTime *big.Int, creationCost *big.Int) (*types.Transaction, error) {
	return _Api.Contract.CreateCoupons(&_Api.TransactOpts, transactionId, issuerBusiness, count, cost, discount, productCategory, thresholdValue, productId, couponType, expiryTime, creationCost)
}

// CreateCoupons is a paid mutator transaction binding the contract method 0xfd57536d.
//
// Solidity: function createCoupons(uint256 transactionId, address issuerBusiness, uint256 count, uint256 cost, uint256 discount, uint256 productCategory, uint256 thresholdValue, uint256 productId, uint8 couponType, uint256 expiryTime, uint256 creationCost) returns(uint256)
func (_Api *ApiTransactorSession) CreateCoupons(transactionId *big.Int, issuerBusiness common.Address, count *big.Int, cost *big.Int, discount *big.Int, productCategory *big.Int, thresholdValue *big.Int, productId *big.Int, couponType uint8, expiryTime *big.Int, creationCost *big.Int) (*types.Transaction, error) {
	return _Api.Contract.CreateCoupons(&_Api.TransactOpts, transactionId, issuerBusiness, count, cost, discount, productCategory, thresholdValue, productId, couponType, expiryTime, creationCost)
}

// DeactiveCoupon is a paid mutator transaction binding the contract method 0x0d2c7b5f.
//
// Solidity: function deactiveCoupon(uint256 transactionId, uint256 couponId) returns()
func (_Api *ApiTransactor) DeactiveCoupon(opts *bind.TransactOpts, transactionId *big.Int, couponId *big.Int) (*types.Transaction, error) {
	return _Api.contract.Transact(opts, "deactiveCoupon", transactionId, couponId)
}

// DeactiveCoupon is a paid mutator transaction binding the contract method 0x0d2c7b5f.
//
// Solidity: function deactiveCoupon(uint256 transactionId, uint256 couponId) returns()
func (_Api *ApiSession) DeactiveCoupon(transactionId *big.Int, couponId *big.Int) (*types.Transaction, error) {
	return _Api.Contract.DeactiveCoupon(&_Api.TransactOpts, transactionId, couponId)
}

// DeactiveCoupon is a paid mutator transaction binding the contract method 0x0d2c7b5f.
//
// Solidity: function deactiveCoupon(uint256 transactionId, uint256 couponId) returns()
func (_Api *ApiTransactorSession) DeactiveCoupon(transactionId *big.Int, couponId *big.Int) (*types.Transaction, error) {
	return _Api.Contract.DeactiveCoupon(&_Api.TransactOpts, transactionId, couponId)
}

// MintTokens is a paid mutator transaction binding the contract method 0x34a7c2e7.
//
// Solidity: function mintTokens(uint256 transactionId, uint256 amount) returns(uint256)
func (_Api *ApiTransactor) MintTokens(opts *bind.TransactOpts, transactionId *big.Int, amount *big.Int) (*types.Transaction, error) {
	return _Api.contract.Transact(opts, "mintTokens", transactionId, amount)
}

// MintTokens is a paid mutator transaction binding the contract method 0x34a7c2e7.
//
// Solidity: function mintTokens(uint256 transactionId, uint256 amount) returns(uint256)
func (_Api *ApiSession) MintTokens(transactionId *big.Int, amount *big.Int) (*types.Transaction, error) {
	return _Api.Contract.MintTokens(&_Api.TransactOpts, transactionId, amount)
}

// MintTokens is a paid mutator transaction binding the contract method 0x34a7c2e7.
//
// Solidity: function mintTokens(uint256 transactionId, uint256 amount) returns(uint256)
func (_Api *ApiTransactorSession) MintTokens(transactionId *big.Int, amount *big.Int) (*types.Transaction, error) {
	return _Api.Contract.MintTokens(&_Api.TransactOpts, transactionId, amount)
}

// Pay is a paid mutator transaction binding the contract method 0x0313766f.
//
// Solidity: function pay(uint256 transactionId, address account, uint256 amount) returns()
func (_Api *ApiTransactor) Pay(opts *bind.TransactOpts, transactionId *big.Int, account common.Address, amount *big.Int) (*types.Transaction, error) {
	return _Api.contract.Transact(opts, "pay", transactionId, account, amount)
}

// Pay is a paid mutator transaction binding the contract method 0x0313766f.
//
// Solidity: function pay(uint256 transactionId, address account, uint256 amount) returns()
func (_Api *ApiSession) Pay(transactionId *big.Int, account common.Address, amount *big.Int) (*types.Transaction, error) {
	return _Api.Contract.Pay(&_Api.TransactOpts, transactionId, account, amount)
}

// Pay is a paid mutator transaction binding the contract method 0x0313766f.
//
// Solidity: function pay(uint256 transactionId, address account, uint256 amount) returns()
func (_Api *ApiTransactorSession) Pay(transactionId *big.Int, account common.Address, amount *big.Int) (*types.Transaction, error) {
	return _Api.Contract.Pay(&_Api.TransactOpts, transactionId, account, amount)
}

// PurchaseCoupon is a paid mutator transaction binding the contract method 0xea747b8c.
//
// Solidity: function purchaseCoupon(uint256 transactionId, address businessAddress, uint256 couponId, uint256 count) returns()
func (_Api *ApiTransactor) PurchaseCoupon(opts *bind.TransactOpts, transactionId *big.Int, businessAddress common.Address, couponId *big.Int, count *big.Int) (*types.Transaction, error) {
	return _Api.contract.Transact(opts, "purchaseCoupon", transactionId, businessAddress, couponId, count)
}

// PurchaseCoupon is a paid mutator transaction binding the contract method 0xea747b8c.
//
// Solidity: function purchaseCoupon(uint256 transactionId, address businessAddress, uint256 couponId, uint256 count) returns()
func (_Api *ApiSession) PurchaseCoupon(transactionId *big.Int, businessAddress common.Address, couponId *big.Int, count *big.Int) (*types.Transaction, error) {
	return _Api.Contract.PurchaseCoupon(&_Api.TransactOpts, transactionId, businessAddress, couponId, count)
}

// PurchaseCoupon is a paid mutator transaction binding the contract method 0xea747b8c.
//
// Solidity: function purchaseCoupon(uint256 transactionId, address businessAddress, uint256 couponId, uint256 count) returns()
func (_Api *ApiTransactorSession) PurchaseCoupon(transactionId *big.Int, businessAddress common.Address, couponId *big.Int, count *big.Int) (*types.Transaction, error) {
	return _Api.Contract.PurchaseCoupon(&_Api.TransactOpts, transactionId, businessAddress, couponId, count)
}

// RedeemTokens is a paid mutator transaction binding the contract method 0xa6e158f8.
//
// Solidity: function redeemTokens(uint256 amount) returns()
func (_Api *ApiTransactor) RedeemTokens(opts *bind.TransactOpts, amount *big.Int) (*types.Transaction, error) {
	return _Api.contract.Transact(opts, "redeemTokens", amount)
}

// RedeemTokens is a paid mutator transaction binding the contract method 0xa6e158f8.
//
// Solidity: function redeemTokens(uint256 amount) returns()
func (_Api *ApiSession) RedeemTokens(amount *big.Int) (*types.Transaction, error) {
	return _Api.Contract.RedeemTokens(&_Api.TransactOpts, amount)
}

// RedeemTokens is a paid mutator transaction binding the contract method 0xa6e158f8.
//
// Solidity: function redeemTokens(uint256 amount) returns()
func (_Api *ApiTransactorSession) RedeemTokens(amount *big.Int) (*types.Transaction, error) {
	return _Api.Contract.RedeemTokens(&_Api.TransactOpts, amount)
}

// RegisterMember is a paid mutator transaction binding the contract method 0x203d6441.
//
// Solidity: function registerMember(uint256 transactionId, address memberAddress, uint8 accountType) returns()
func (_Api *ApiTransactor) RegisterMember(opts *bind.TransactOpts, transactionId *big.Int, memberAddress common.Address, accountType uint8) (*types.Transaction, error) {
	return _Api.contract.Transact(opts, "registerMember", transactionId, memberAddress, accountType)
}

// RegisterMember is a paid mutator transaction binding the contract method 0x203d6441.
//
// Solidity: function registerMember(uint256 transactionId, address memberAddress, uint8 accountType) returns()
func (_Api *ApiSession) RegisterMember(transactionId *big.Int, memberAddress common.Address, accountType uint8) (*types.Transaction, error) {
	return _Api.Contract.RegisterMember(&_Api.TransactOpts, transactionId, memberAddress, accountType)
}

// RegisterMember is a paid mutator transaction binding the contract method 0x203d6441.
//
// Solidity: function registerMember(uint256 transactionId, address memberAddress, uint8 accountType) returns()
func (_Api *ApiTransactorSession) RegisterMember(transactionId *big.Int, memberAddress common.Address, accountType uint8) (*types.Transaction, error) {
	return _Api.Contract.RegisterMember(&_Api.TransactOpts, transactionId, memberAddress, accountType)
}

// ApiCouponCreatedIterator is returned from FilterCouponCreated and is used to iterate over the raw logs and unpacked data for CouponCreated events raised by the Api contract.
type ApiCouponCreatedIterator struct {
	Event *ApiCouponCreated // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ApiCouponCreatedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ApiCouponCreated)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ApiCouponCreated)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ApiCouponCreatedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ApiCouponCreatedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ApiCouponCreated represents a CouponCreated event raised by the Api contract.
type ApiCouponCreated struct {
	TransactionId *big.Int
	CouponId      *big.Int
	Raw           types.Log // Blockchain specific contextual infos
}

// FilterCouponCreated is a free log retrieval operation binding the contract event 0xa642f6125031e33b459faac09c60d43622ebedeb338901054283d9bb430deb12.
//
// Solidity: event CouponCreated(uint256 transactionId, uint256 couponId)
func (_Api *ApiFilterer) FilterCouponCreated(opts *bind.FilterOpts) (*ApiCouponCreatedIterator, error) {

	logs, sub, err := _Api.contract.FilterLogs(opts, "CouponCreated")
	if err != nil {
		return nil, err
	}
	return &ApiCouponCreatedIterator{contract: _Api.contract, event: "CouponCreated", logs: logs, sub: sub}, nil
}

// WatchCouponCreated is a free log subscription operation binding the contract event 0xa642f6125031e33b459faac09c60d43622ebedeb338901054283d9bb430deb12.
//
// Solidity: event CouponCreated(uint256 transactionId, uint256 couponId)
func (_Api *ApiFilterer) WatchCouponCreated(opts *bind.WatchOpts, sink chan<- *ApiCouponCreated) (event.Subscription, error) {

	logs, sub, err := _Api.contract.WatchLogs(opts, "CouponCreated")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ApiCouponCreated)
				if err := _Api.contract.UnpackLog(event, "CouponCreated", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseCouponCreated is a log parse operation binding the contract event 0xa642f6125031e33b459faac09c60d43622ebedeb338901054283d9bb430deb12.
//
// Solidity: event CouponCreated(uint256 transactionId, uint256 couponId)
func (_Api *ApiFilterer) ParseCouponCreated(log types.Log) (*ApiCouponCreated, error) {
	event := new(ApiCouponCreated)
	if err := _Api.contract.UnpackLog(event, "CouponCreated", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ApiCouponHoldingTransactionCompleteIterator is returned from FilterCouponHoldingTransactionComplete and is used to iterate over the raw logs and unpacked data for CouponHoldingTransactionComplete events raised by the Api contract.
type ApiCouponHoldingTransactionCompleteIterator struct {
	Event *ApiCouponHoldingTransactionComplete // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ApiCouponHoldingTransactionCompleteIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ApiCouponHoldingTransactionComplete)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ApiCouponHoldingTransactionComplete)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ApiCouponHoldingTransactionCompleteIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ApiCouponHoldingTransactionCompleteIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ApiCouponHoldingTransactionComplete represents a CouponHoldingTransactionComplete event raised by the Api contract.
type ApiCouponHoldingTransactionComplete struct {
	TransactionId    *big.Int
	ConsumerSender   common.Address
	BusinessReceiver common.Address
	HoldingId        *big.Int
	Raw              types.Log // Blockchain specific contextual infos
}

// FilterCouponHoldingTransactionComplete is a free log retrieval operation binding the contract event 0x48d1eb8434432b178452473c313c00292893f57718970b914ebe9472b6e3f571.
//
// Solidity: event CouponHoldingTransactionComplete(uint256 transactionId, address consumerSender, address businessReceiver, uint256 holdingId)
func (_Api *ApiFilterer) FilterCouponHoldingTransactionComplete(opts *bind.FilterOpts) (*ApiCouponHoldingTransactionCompleteIterator, error) {

	logs, sub, err := _Api.contract.FilterLogs(opts, "CouponHoldingTransactionComplete")
	if err != nil {
		return nil, err
	}
	return &ApiCouponHoldingTransactionCompleteIterator{contract: _Api.contract, event: "CouponHoldingTransactionComplete", logs: logs, sub: sub}, nil
}

// WatchCouponHoldingTransactionComplete is a free log subscription operation binding the contract event 0x48d1eb8434432b178452473c313c00292893f57718970b914ebe9472b6e3f571.
//
// Solidity: event CouponHoldingTransactionComplete(uint256 transactionId, address consumerSender, address businessReceiver, uint256 holdingId)
func (_Api *ApiFilterer) WatchCouponHoldingTransactionComplete(opts *bind.WatchOpts, sink chan<- *ApiCouponHoldingTransactionComplete) (event.Subscription, error) {

	logs, sub, err := _Api.contract.WatchLogs(opts, "CouponHoldingTransactionComplete")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ApiCouponHoldingTransactionComplete)
				if err := _Api.contract.UnpackLog(event, "CouponHoldingTransactionComplete", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseCouponHoldingTransactionComplete is a log parse operation binding the contract event 0x48d1eb8434432b178452473c313c00292893f57718970b914ebe9472b6e3f571.
//
// Solidity: event CouponHoldingTransactionComplete(uint256 transactionId, address consumerSender, address businessReceiver, uint256 holdingId)
func (_Api *ApiFilterer) ParseCouponHoldingTransactionComplete(log types.Log) (*ApiCouponHoldingTransactionComplete, error) {
	event := new(ApiCouponHoldingTransactionComplete)
	if err := _Api.contract.UnpackLog(event, "CouponHoldingTransactionComplete", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ApiCouponTransactionCompleteIterator is returned from FilterCouponTransactionComplete and is used to iterate over the raw logs and unpacked data for CouponTransactionComplete events raised by the Api contract.
type ApiCouponTransactionCompleteIterator struct {
	Event *ApiCouponTransactionComplete // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ApiCouponTransactionCompleteIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ApiCouponTransactionComplete)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ApiCouponTransactionComplete)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ApiCouponTransactionCompleteIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ApiCouponTransactionCompleteIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ApiCouponTransactionComplete represents a CouponTransactionComplete event raised by the Api contract.
type ApiCouponTransactionComplete struct {
	TransactionId    *big.Int
	BusinessSender   common.Address
	ConsumerReceiver common.Address
	CouponId         *big.Int
	Count            *big.Int
	Raw              types.Log // Blockchain specific contextual infos
}

// FilterCouponTransactionComplete is a free log retrieval operation binding the contract event 0xc19f12d44b95c1a221ab57e69ec538ff5181f820f28f967108426da285ab9a6b.
//
// Solidity: event CouponTransactionComplete(uint256 transactionId, address businessSender, address consumerReceiver, uint256 couponId, uint256 count)
func (_Api *ApiFilterer) FilterCouponTransactionComplete(opts *bind.FilterOpts) (*ApiCouponTransactionCompleteIterator, error) {

	logs, sub, err := _Api.contract.FilterLogs(opts, "CouponTransactionComplete")
	if err != nil {
		return nil, err
	}
	return &ApiCouponTransactionCompleteIterator{contract: _Api.contract, event: "CouponTransactionComplete", logs: logs, sub: sub}, nil
}

// WatchCouponTransactionComplete is a free log subscription operation binding the contract event 0xc19f12d44b95c1a221ab57e69ec538ff5181f820f28f967108426da285ab9a6b.
//
// Solidity: event CouponTransactionComplete(uint256 transactionId, address businessSender, address consumerReceiver, uint256 couponId, uint256 count)
func (_Api *ApiFilterer) WatchCouponTransactionComplete(opts *bind.WatchOpts, sink chan<- *ApiCouponTransactionComplete) (event.Subscription, error) {

	logs, sub, err := _Api.contract.WatchLogs(opts, "CouponTransactionComplete")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ApiCouponTransactionComplete)
				if err := _Api.contract.UnpackLog(event, "CouponTransactionComplete", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseCouponTransactionComplete is a log parse operation binding the contract event 0xc19f12d44b95c1a221ab57e69ec538ff5181f820f28f967108426da285ab9a6b.
//
// Solidity: event CouponTransactionComplete(uint256 transactionId, address businessSender, address consumerReceiver, uint256 couponId, uint256 count)
func (_Api *ApiFilterer) ParseCouponTransactionComplete(log types.Log) (*ApiCouponTransactionComplete, error) {
	event := new(ApiCouponTransactionComplete)
	if err := _Api.contract.UnpackLog(event, "CouponTransactionComplete", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ApiMemberRegisteredIterator is returned from FilterMemberRegistered and is used to iterate over the raw logs and unpacked data for MemberRegistered events raised by the Api contract.
type ApiMemberRegisteredIterator struct {
	Event *ApiMemberRegistered // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ApiMemberRegisteredIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ApiMemberRegistered)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ApiMemberRegistered)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ApiMemberRegisteredIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ApiMemberRegisteredIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ApiMemberRegistered represents a MemberRegistered event raised by the Api contract.
type ApiMemberRegistered struct {
	TransactionId *big.Int
	MemberAddress common.Address
	Authority     uint8
	Raw           types.Log // Blockchain specific contextual infos
}

// FilterMemberRegistered is a free log retrieval operation binding the contract event 0xcf5372d965b8a6c9a60a3fff29e749a3373cdb5251da091443f0660a0f602db4.
//
// Solidity: event MemberRegistered(uint256 transactionId, address memberAddress, uint8 authority)
func (_Api *ApiFilterer) FilterMemberRegistered(opts *bind.FilterOpts) (*ApiMemberRegisteredIterator, error) {

	logs, sub, err := _Api.contract.FilterLogs(opts, "MemberRegistered")
	if err != nil {
		return nil, err
	}
	return &ApiMemberRegisteredIterator{contract: _Api.contract, event: "MemberRegistered", logs: logs, sub: sub}, nil
}

// WatchMemberRegistered is a free log subscription operation binding the contract event 0xcf5372d965b8a6c9a60a3fff29e749a3373cdb5251da091443f0660a0f602db4.
//
// Solidity: event MemberRegistered(uint256 transactionId, address memberAddress, uint8 authority)
func (_Api *ApiFilterer) WatchMemberRegistered(opts *bind.WatchOpts, sink chan<- *ApiMemberRegistered) (event.Subscription, error) {

	logs, sub, err := _Api.contract.WatchLogs(opts, "MemberRegistered")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ApiMemberRegistered)
				if err := _Api.contract.UnpackLog(event, "MemberRegistered", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseMemberRegistered is a log parse operation binding the contract event 0xcf5372d965b8a6c9a60a3fff29e749a3373cdb5251da091443f0660a0f602db4.
//
// Solidity: event MemberRegistered(uint256 transactionId, address memberAddress, uint8 authority)
func (_Api *ApiFilterer) ParseMemberRegistered(log types.Log) (*ApiMemberRegistered, error) {
	event := new(ApiMemberRegistered)
	if err := _Api.contract.UnpackLog(event, "MemberRegistered", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ApiSuperCoinTransactionCompleteIterator is returned from FilterSuperCoinTransactionComplete and is used to iterate over the raw logs and unpacked data for SuperCoinTransactionComplete events raised by the Api contract.
type ApiSuperCoinTransactionCompleteIterator struct {
	Event *ApiSuperCoinTransactionComplete // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ApiSuperCoinTransactionCompleteIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ApiSuperCoinTransactionComplete)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ApiSuperCoinTransactionComplete)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ApiSuperCoinTransactionCompleteIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ApiSuperCoinTransactionCompleteIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ApiSuperCoinTransactionComplete represents a SuperCoinTransactionComplete event raised by the Api contract.
type ApiSuperCoinTransactionComplete struct {
	TransactionId *big.Int
	Sender        common.Address
	Receiver      common.Address
	Amount        *big.Int
	Raw           types.Log // Blockchain specific contextual infos
}

// FilterSuperCoinTransactionComplete is a free log retrieval operation binding the contract event 0x2e578e436685c8ee906431b002661f41d45a790b565ca7b6f06ae35bfae01a76.
//
// Solidity: event SuperCoinTransactionComplete(uint256 transactionId, address sender, address receiver, uint256 amount)
func (_Api *ApiFilterer) FilterSuperCoinTransactionComplete(opts *bind.FilterOpts) (*ApiSuperCoinTransactionCompleteIterator, error) {

	logs, sub, err := _Api.contract.FilterLogs(opts, "SuperCoinTransactionComplete")
	if err != nil {
		return nil, err
	}
	return &ApiSuperCoinTransactionCompleteIterator{contract: _Api.contract, event: "SuperCoinTransactionComplete", logs: logs, sub: sub}, nil
}

// WatchSuperCoinTransactionComplete is a free log subscription operation binding the contract event 0x2e578e436685c8ee906431b002661f41d45a790b565ca7b6f06ae35bfae01a76.
//
// Solidity: event SuperCoinTransactionComplete(uint256 transactionId, address sender, address receiver, uint256 amount)
func (_Api *ApiFilterer) WatchSuperCoinTransactionComplete(opts *bind.WatchOpts, sink chan<- *ApiSuperCoinTransactionComplete) (event.Subscription, error) {

	logs, sub, err := _Api.contract.WatchLogs(opts, "SuperCoinTransactionComplete")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ApiSuperCoinTransactionComplete)
				if err := _Api.contract.UnpackLog(event, "SuperCoinTransactionComplete", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseSuperCoinTransactionComplete is a log parse operation binding the contract event 0x2e578e436685c8ee906431b002661f41d45a790b565ca7b6f06ae35bfae01a76.
//
// Solidity: event SuperCoinTransactionComplete(uint256 transactionId, address sender, address receiver, uint256 amount)
func (_Api *ApiFilterer) ParseSuperCoinTransactionComplete(log types.Log) (*ApiSuperCoinTransactionComplete, error) {
	event := new(ApiSuperCoinTransactionComplete)
	if err := _Api.contract.UnpackLog(event, "SuperCoinTransactionComplete", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}
